[{"content":"서론 원티드 프리온보딩 4월 백엔드 챌린지에서\n도커를 활용하여 클라우드 배포까지 해보는 특강을 진행했다.\n최근에 개인적으로 도커를 많이 사용하면서\n도커를 활용할 수 있는 다양한 정보를 접하고 싶었는데\n때마침 특강을 진행해서 감사히 듣게 되었다.\n이미 알고 있던 기본적인 도커 개념과 활용 방법을 확실히 정리할 수 있어서 좋았고,\n가장 집중해서 본 부분은 클라우드 환경에서 ECS 또는 EKS를 사용하여\n도커를 활용하는 부분이었다.\nECS와 EKS에 대한 내용을 정리하고, 나중에 잘 활용해보고자\n블로그에 포스팅하게 되었다.\nEKS (Elastic Kubernetes Service) 관리형 쿠버네티스 서비스 사용자는 쿠버네티스 API를 사용하여 EKS 클러스터를 관리할 수 있다. 다양한 AWS 서비스와의 통합을 제공한다. 쿠버네티스 기반의 컨테이너 오케스트레이션을 가능하게 하며,\n이미 쿠버네티스에 익숙한 사용자 또는\n복잡한 애플리케이션 아키텍처를 가진 사용자에게 적합한 옵션이다. 복잡한 애플리케이션 아키텍처와 고도로 확장 가능한 환경을 구축할 수 있다. ECS (Elastic Container Service) 관리형 컨테이너 오케스트레이션 서비스 도커 컨테이너를 실행하기 위한 기능 제공 사용자는 컨테이너 이미지를 정의하고 클러스터에 배포, 관리, 스케일링 할 수 있다. 컨테이너화된 애플리케이션을 운영하기에 적합한 환경을 제공한다. 쿠버네티스를 활용해야 하는 상황은 아니어서 주로 ECS 위주의 학습\n기술 문서도 한글로 잘 되어 있다!\nECS 서비스 종류 호스트 유형 EC2, Fargate, External EC2 용량공급자를 통해 EC2 Auto-Scaling Group을 연결 ECS에서 제공하는 관리형 지표(Capacity Provider Reservation)에 따라 EC2 용량 추가 및 제거 가능 컨테이너 수의 증가 및 축소에 따라 EC2도 함께 증가 및 축소됨 EC2 요금만큼 과금 EC2 인스턴스는 계속 실행되어 있기 때문에 그만큼의 과금이 필요함 Fargate 서버리스 컨테이너 오케스트레이션 EC2 처럼 배포하거나 관리할 필요 없음 (서비스만 운영) 컨테이너 실행에 필요한 인프라 및 리소스 관리를 AWS가 대신 처리함 시간당 vCPU, Storage 용량 비용 부과 컨테이너를 쉽게 배포하고 스케일링할 수 있으며, 고가용성과 확장성을 제공함 External 보안상의 이유로 AWS 인프라가 아닌 호스트에서 서비스가 동작하게 하고 싶을때 사용 호스트 및 컨테이너 등의 실제 서비스는 물리적으로 AWS 밖에서 동작 AWS 콘솔에서 관리 ECS 구성 ECS Task Definition을 작성하고 그 Task 대로 컨테이너가 운영됨 JSon 양식 컨테이너 이미지, 컨테이너 자원 할당, 포트 구성, 환경변수, 로그 구성 등 설정 (1) AWS ECR 컨테이너 레지스트리에 컨테이너 이미지 push 도커 이미지를 private으로 쉽게 관리 가능 AWS 서비스와 연동이 더 간편함 (2) ECR에서 이미지를 관리하며 ECS Task Definition에 이미지 주입 (3) ECS 클러스터에 Task Definition 대로 적용 특정 이미지를 가지고 어떤 작업을 할 지, 어느 정도의 리소스를 사용할 지 등 EKS와 비교 EKS는 트래픽이 없더라도 비용이 발생 ECS는 트래픽이 많아진다면 비용이 더 많이 발생할 수 있지만,\n토이 프로젝트 용도로는 좋다. 트래픽이 없으면 비용이 발생하지 않음 Github Actions에 ecs 무중단 배포 템플릿이 제공됨 EKS는 공식 템플릿 없음 ECS 실습 ECS 배포 과정 ECS 클러스터 생성 템플릿 : 네트워킹 전용 VPC 설정 확인 AWS ECR 레포지토리 생성 → 사용할 이미지 push (AWS CLI 사용) \u0026ldquo;푸시 명령 보기\u0026rdquo; 설명 참고 AWS CLI 환경 설정 IAM 계정 생성 IAM 권한 설정 AmazonECS_FullAccess AmazonEC2ContainerRegistryFullAccess access key 및 secret access key 생성 이미지 push ELB (Elastic Load Balancing) EC2 → 로드밸런서 → 로드밸런서 생성 → Application Load Balancer VPC 지정 Target Group 임시 생성 Load Balancer 생성 완료 Listener 삭제 Target Group 삭제 Task Definition 정의 Fargate 컨테이너 추가 ECS → Repository → 이미지 URI 확인 메모리 제한 포트 매핑 Task Definition 생성 Service 생성 Task Definition → Service 생성 원하는 Task 선택 후 서비스 생성 VPC 및 서브넷 설정 보안 그룹 Task Definition에서 설정한 컨테이너 포트와 동일하게 설정 로드 밸런서 추가 Auto Scaling 설정 Task와 Service Task 하나의 작업 Service 여러 개의 Task 관리 다양한 설정 가능 (ELB, Auto Scaling 등) Github Actions 자동 배포 Deploy to Amazon ECS workflow 제공 세부 설정 수정 Settings → Actions secrets 세팅 (AWS access key 관련) 도커 이미지 정보 및 Task 정보 세팅 References 원티드 프리온보딩 4월 백엔드 챌린지 ECS 기술 문서 ","date":"2023-05-14T22:00:00+09:00","permalink":"/posts/aws-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0-2/","title":"AWS 서비스 파악하기 - ECS, EKS"},{"content":"서론 Kafka 모니터링을 하기 위해 CMAK 환경을 세팅하는중에\nKeeperErrorCode = Unimplemented for /kafka-manager/mutex 에러가 발생했다.\n이 에러를 해결한 과정을 적어본다.\n개발 환경 docker-compose를 통해 zookeeper, kafka, cmak을 로컬 환경에서 실행시켰다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 version: \u0026#34;3\u0026#34; services: zookeeper: container_name: \u0026#39;zookeeper\u0026#39; image: \u0026#39;wurstmeister/zookeeper\u0026#39; ports: - \u0026#39;2181:2181\u0026#39; environment: - ZOOKEEPER_CLIENT_PORT=2181 - ALLOW_ANONYMOUS_LOGIN=yes healthcheck: test: if netstat -ltn | grep -c \u0026#34;2181\u0026#34;; then echo 0; else echo 1; fi interval: 10s timeout: 5s retries: 2 kafka: container_name: \u0026#39;kafka\u0026#39; image: \u0026#39;wurstmeister/kafka\u0026#39; ports: - \u0026#39;9092:9092\u0026#39; environment: KAFKA_ADVERTISED_HOST_NAME: kafka KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 depends_on: zookeeper: condition: service_healthy healthcheck: test: if netstat -ltn | grep -c \u0026#34;9092\u0026#34;; then echo 0; else echo 1; fi interval: 10s timeout: 5s retries: 2 kafka-manager-cmak: container_name: \u0026#39;kafka-manager-cmak\u0026#39; image: \u0026#39;hlebalbau/kafka-manager\u0026#39; restart: on-failure ports: - \u0026#34;9000:9000\u0026#34; environment: ZK_HOSTS: zookeeper:2181 APPLICATION_SECRET: \u0026#34;random-secret\u0026#34; KM_ARGS: -Djava.net.preferIPv4Stack=true depends_on: kafka: condition: service_healthy CMAK 에러 \u0026ldquo;KeeperErrorCode = Unimplemented for /kafka-manager/mutex\u0026rdquo; 이 에러는 CMAK에서 add cluster시에 필요한 zookeeper의 znode가 없어서 발생했다.\nznode는 Zookeeper에서 데이터를 저장하고 관리하기 위한 추상적인 노드이고,\nznode를 생성해주면 이 에러는 해결된다.\n이 에러를 찾아보면서 자세히 알아보았는데,\n최신 CMAK은 Apache Curator 2.12.0을 사용하기 때문에\n기본적으로 3.5.x 버전의 zookeeper를 지원하고\nbuild에 수정 사항이 있는 3.4.x 버전만 지원한다고 한다.\n내가 사용한 zookeeper의 버전은 3.4.13 버전이었고,\n직접 수정 해줘야하는 부분이 있었던 것이다.\nznode 생성하기 생성해줘야 하는 znode는\n/kafka-manager/mutex\n/kafka-manager/mutex/locks\n/kafka-manager/mutex/leases\n총 3개이다.\n/kafka-manager는 cmak 컨테이너를 실행시키면 생성되기 때문에\nzookeeper, kafka, cmak 컨테이너를 전부 실행시키고 진행한다.\nzkCli.sh 실행 Zookeeper의 zkCli.sh을 실행하여 Zookeeper 서버에 연결하고,\nZookeeper 클러스터의 구성요소를 관리할 수 있다.\n도커 데스크탑을 사용하는 경우,\nZookeeper 컨테이너의 터미널 창에서 ./bin/zkCli.sh 명령어를 입력하여 접속하고,\n직접 명령어로 컨테이너에 접근하고 싶다면,\ndocker-compose exec -t zookeeper bash 명령어를 입력하여\n\u0026lsquo;zookeeper\u0026rsquo; 컨테이너에서 bash shell 환경을 열 수 있다.\n그리고 ./bin/zkCli.sh 명령어를 입력하여 Zookeeper 서버에 연결한다.\n아래와 같은 로그가 출력된다. (\u0026hellip;은 생략)\n1 2 3 4 5 6 7 8 9 # ./bin/zkCli.sh Connecting to localhost:2181 ... Welcome to ZooKeeper! ... WATCHER:: WatchedEvent state:SyncConnected type:None path:null znode 생성 zkCli.sh를 실행했다면 이제 세 가지의 znode를 생성한다.\ncreate /kafka-manager/mutex \u0026quot;\u0026quot;\ncreate /kafka-manager/mutex/locks \u0026quot;\u0026quot;\ncreate /kafka-manager/mutex/leases \u0026quot;\u0026quot;\n잘 생성된 것을 확인할 수 있다. (Created)\n이제 Add Cluster가 성공적으로 이뤄진다!\n스크립트 작성 매번 컨테이너를 시작할 때마다\n수작업으로 znode를 생성하는 것은 비효율적이기 때문에\n자동화할 수 있는 스크립트를 간단히 작성했다.\n1 2 3 4 5 6 7 8 9 10 11 #! /bin/sh echo \u0026#34;# Add Zookeeper\u0026#39;s ZNodes\u0026#34; docker-compose exec -t zookeeper bash \u0026lt;\u0026lt;EOF ./bin/zkCli.sh create /kafka-manager/mutex \u0026#34;\u0026#34; create /kafka-manager/mutex/locks \u0026#34;\u0026#34; create /kafka-manager/mutex/leases \u0026#34;\u0026#34; quit exit EOF docker-compose exec 명령어를 sh 파일에서 실행하면\n일반적으로 동작하지 않는다.\ndocker-compose exec는 명령어를 특정 컨테이너에서 실행하기 위해 사용하는 커맨드이며,\n이 명령어는 docker-compose.yml 파일에 정의된 컨테이너들만 접근할 수 있다.\n따라서, docker-compose exec 명령어를 실행하려면\n일반적으로 터미널에서 수동으로 입력해야 하고,\n스크립트에서 자동으로 docker-compose exec 명령어를 실행하고 싶다면,\n위와 같이 EOF를 명시해줘야 한다.\n위 스크립트에서 \u0026lsquo;quit\u0026rsquo;는 zkCli.sh를 종료하는 명령어이고,\n\u0026rsquo;exit\u0026rsquo;는 docker-compose exec 명령어로 실행한\nzookeeper 컨테이너의 bash shell을 종료하는 명령어이다.\n이제 스크립트를 실행하면 znode 세팅을 빠르게 끝낼 수 있다!\nReferences 내가 작성한 이슈 https://github.com/yahoo/CMAK/issues/748#issuecomment-598734547 https://lightrun.com/answers/yahoo-cmak-failed-to-add-cluster-on-3001 ","date":"2023-05-09T21:00:00+09:00","permalink":"/posts/cmak-keeper-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/","title":"CMAK cluster 생성시 주키퍼 오류(KeeperErrorCode) 해결하기"},{"content":"서론 AWS의 다양한 리소스를 파악해보고자\n업무에 바로 쓰는 AWS 입문 책을 읽기 시작했다.\n그 내용을 하나씩 정리해보고자 한다.\nIAM (Identity and Access Management) IAM은 어떤 리소스나 서비스에 대한 접근 권한 및 레벨 관리 기능을 제공한다.\nroot 유저는 모든 리소스를 제약없이 사용할 수 있고, 새로운 유저를 만들 수 있다.\n유저는 access key와 secret key를 가지고 있다.\n유저를 생성할 때 access key와 secret key를 확인할 수 있고,\nsecret key는 나중에 다시 확인할 수 없다고 한다.\n따로 보관하고 유출되지 않도록 주의한다.\n쉽게 말해서\naccess key는 아이디, secret key는 비밀번호로 생각하면 된다.\n관리 요소 IAM은 유저, 그룹, 역할, 정책을 관리한다.\n유저 유저는 access key와 secret key를 가지고 AWS 리소스를 사용할 수 있다. 그룹 그룹은 하나 or 여러 유저를 포함할 수 있다. 그룹 전체에 접근 권한을 설정할 수 있다. 정책(Policy) 정책을 생성하여 최소 권한 정책을 펼칠 수 있고, 유저 및 그룹에 적용시킬 수 있다. 역할(Role) 역할은 하나 or 다수의 정책을 포함할 수 있다. 계정 타입 유저 생성 시 계정의 타입을 설정한다.\nProgrammatic Access access key를 발급해서 AWS API를 호출하는 방식으로 사용 AWS Management Console Access AWS 웹 콘솔 사용 User name, Password를 입력해 로그인 EC2 (Elastic Compute Cloud) EC2는 클라우드 공간에 크기가 유연하게 변경되는 가상 서버 기능을 제공한다.\n비용 지불 방식 On-Demand 시간당 정해진 금액 지불 짧은 시간 동안 인스턴스를 임대하는 방식 (ex. 서버 테스트 등) 인스턴스의 크기를 늘리거나 줄일 수 있음 (O) 사용한만큼 후불 결제 Reserved 특정 기간만큼 임대 인스턴스의 크기를 늘리거나 줄일 수 없음 (X) 선불 결제, 저렴한 가격 Spot 인스턴스 가격을 입찰하여 구매하는 방식 시장 경제에 따라 인스턴스 비용이 변화함.\n입찰가에 내놓은 금액(최소, 최대)과 맞으면 인스턴스 실행, 그렇지 않으면 꺼진다. EBS (Elastic Block Store) 파일 및 오브젝트를 보관할 수 있는 스토리지 볼륨(파일 시스템)을 만들어준다.\nEBS는 EC2 인스턴스에 부착되어 사용된다.\nEC2 인스턴스가 종료되어도 EBS안에 있는 데이터는 유지된다.\nEBS 타입\nSSD (Solid State Driver) 입출력이 많을 때 유리 HDD (Hard Disk Driver) 처리량이 많을 때 유리 (ex. 방대한 스트리밍 워크로드 등) ELB (Elastic Load Balancer) EC2는 ELB를 사용하여 서버 트래픽을 원활하게 해준다.\nELB 타입\nALB (Application Load Balancer) OSI Application(7th) Layer에서 작동 HTTP, HTTPS와 같은 네트워크 트래픽을 제어(라우팅)할 때 적합 NLB (Network Load Balancer) OSI Transport(4th) Layer에서 작동 TCP/IP 모델 포함. TCP 트래픽을 관리(라우팅). 대량 요청에 적합 (ex. production 환경) CLB (Classic Load Balancer) ALB, NLB보다 성능이 뒤처지는 레거시 네트워크 호스트가 누구인지 알 수 없는 문제.\n믿어도 되는 호스트인지 판단 불가능. 흔히 일어날 수 있는 ELB 에러\n504 Gateway Time-out 에러 로드밸런서 최대 접속 시간 제한 (default 60초) 애플리케이션 규모가 크다면 시간 제한을 변경 X-Forwarded-For 헤더\nHTTP/HTTPS 요청을 로드 밸런서에서 받을 때 출처에 대한 정보를 담고 있다. public IP address는 DNS 요청에 의해 ELB에서 private IP address로 인식.\n→ private IP address가 EC2 인스턴스로 보내지는데, public IP address를 확인 불가능.\n→ 그래서 X-Forwarded-For 헤더에 public IP address를 담아서 전달. RDS (Relational Database Service) 관계형 데이터베이스 서비스 생성\n자동 백업 (Automated Backup) RDS에서 데이터베이스를 생성하면 자동 백업 기능이 default로 활성화 된다.\n1~35일의 보유 기간 내에 특정 시간으로 데이터베이스 상태를 복원할 수 있다.\n7~35일로 설정 가능하다.\n자동 백업 기능은 스냅샷과 트랜잭션 로그를 생성 후 S3 버킷에 저장.\n복구 희망 날짜의 스냅샷과 트랜잭션 로그를 참조하여 복원.\n자동 백업 단점\n백업 정보를 S3에 업로드하는 동안 입출력 지연 발생 원본 RDS 인스턴스를 삭제하면 백업 정보도 모두 사라짐 다중 가용 영역 (Multi Availability Zone) DB에서 어떤 이벤트가 발생할 때,\n기존 DB 인스턴스를 업데이트함과 동시에 가용 영역에 복제본이 만들어 진다.\n가용 영역에 복제본 생성 실패 시,\nRDS가 자동 감지하여 다른 안정적인 가용 영역에 복제본 다시 생성한다.\n만약 기존 인스턴스에 문제가 생기면 복제본으로 롤백한다.\n이를 재해 복구(Disaster Recovery)라고 한다.\n읽기 전용 복사본 (Read Replica) 데이터를 읽기 위한 데이터베이스 복제본.\n읽기 작업만 수행 가능.\n읽기 전용 DB를 복제하여 트래픽 분산.\n최대 5개까지 복제 가능.\nReferences 업무에 바로 쓰는 AWS 입문 (김성민 / 2023) ","date":"2023-04-17T22:00:00+09:00","permalink":"/posts/aws-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0-1/","title":"AWS 서비스 파악하기 - IAM, EC2, EBS, ELB, RDS"},{"content":"입사 이번 3월에 휴머스온 신입 공채에 합격하여 입사를 하게 되었다!\n예전에 인턴십을 했던 경험이 있지만 제대로 된 개발 경험을 하지 못했기에\n이번 회사에서 많은 경험을 할 수 있기를 기대 중이다.\n인턴십 2개월간의 인턴 기간을 가지고 정규직 전환 심사를 거쳐 정규직 전환이 된다고 한다.\n무조건 열심히 해서 정규직 전환을 해낼 것이기에\n앞으로의 직장 생활이 기대되면서도 걱정이 된다.\n내가 기술적으로 잘 성장할 수 있는 환경일지가 걱정이 된다.\n무조건 열심히 해서 성장해보겠지만, 환경도 무시할 수 없다고 생각한다.\n최대한 열심히 배우고 빠르게 성장해서\n내가 개선할 수 있는 부분을 많이 개선해보고 싶다!\n한 달간의 교육 처음 한 달간은 여러 부서를 순환하며 교육을 받는다.\n회사 전체의 서비스 흐름을 이해해 볼 수 있고, 기술들을 파악할 수 있는 시간이다.\n생각보다 시스템이 방대하고, 트래픽 \u0026amp; 데이터양이 많아서 놀랐다.\n채용 공고에는 기술적인 얘기가 별로 없어서 기술적으로는 기대하지 않았는데,\n많은 경험을 해볼 수 있을 것 같다.\n채용 공고에 기술적인 내용을 좀더 상세히 포함하면 더 실력있는 사람들이 많이 지원할텐데,\n나중에 건의해볼 기회를 봐봐야겠다..!\n기회가 된다면 노션에 팀별로 업무 내용과 기술 스택을 다 정리해보고 싶다.\n회사 기술 블로그도..!\n하지만 혼자서 하고 싶다고 될 수 있는건 아니기에 상황을 봐야겠다..\n곧 다가올 부서 배치 한 달간의 교육이 끝나면 부서 배치를 받고 해당 부서에서 과제를 진행하게 된다.\n여러 팀들중에 어떤 팀으로 배치를 받느냐에 따라 내 커리어가 바뀔것같다.\n데이터 팀 : Hadoop, Spark 등을 활용하여 대규모 데이터를 관리하는 업무 경험\n온프레미스 팀 : 다양한 업체에 솔루션을 제공하며 Java, Spring 서버 개발에 깊은 경험\nTasOn 운영 팀 : 하나의 서비스를 클라우드 환경에서 꾸준히 발전시키는 경험\n이외에도 몇 팀이 더 있지만 현재 교육받고 파악한 팀은 이정도이고,\n어느팀에 가도 좋은 경험을 될 수 있을 것 같다.\n개인적으로는 데이터 팀에서 빅데이터 관리 및 처리 업무를 해보고 싶다.\n대규모 데이터를 다뤄볼 기회가 흔치 않고,\n서버 개발은 사이드 프로젝트로 꾸준히 경험할 수 있기 때문이다.\n곧 부서 배치를 받게 될텐데 어느 팀에 가더라도 기술적으로 많이 성장할 수 있게\n내가 더 노력해야겠다!!\n앞으로의 계획 회사를 다니니까 시간이 굉장히 부족하다.\n남는 시간이 거의 없어서 계획이 지켜질지는 모르겠지만\n일단 계획은 있다!\n개발 공부 회사에서 Spring Batch를 많이 활용한다고 해서 Spring Batch에 대한 학습을 진행 중이다.\n전체적인 Batch 작업 흐름을 이해하고, 회사에서 사용하는 코드를 보며 파악해 볼 생각이다.\n그리고 mybatis와 jsp를 사용하는 프로젝트가 많다고 해서 이 부분도 공부해봐야겠다.\nJPA를 사용하다가 퇴보하는 느낌도 들지만..\n레거시를 관리할 수 있는 능력도 키우는 것으로 생각하고\n긍정적으로 공부해봐야겠다!\n사이드 프로젝트 아무래도 이번 회사에서는 서버 운영에 대한 경험이 어려울 것 같다.\nAWS 인프라와 쿠버네티스 등은 잘 활용하지 않는다.\n그래서 혼자 사이드 프로젝트를 진행하면서 서비스를 운영해보고 싶다.\n일단 도커, 쿠버네티스를 활용하여 컨테이너 오케스트레이션 능력을 갖추고,\n서비스를 안정적으로 운영해보는 경험을 해봐야겠다.\n혼자서 개발하려니 프론트엔드가 걱정이긴 한데..\nFlutter로 앱 프론트 개발을 생각 중이다.\n장기 프로젝트가 될 것 같다..\n블로그 운영 이번에 취업도 했겠다..\n회사에서 접하는 기술적인 issue들을 블로그에서 다루고 싶어서\nGithub.io 블로그 테마를 새로 바꾸며 다시 살려냈다!\n자주 글을 작성하지는 못하겠지만\n한 달에 한 번 정도는 글을 작성해 보려고 한다.\n앞으로 배울 내용도 많을 거니까 기술적인 내용들로 블로그를 채워봐야겠다!\n","date":"2023-04-10T14:00:00+09:00","permalink":"/posts/%EC%BB%A4%EB%A6%AC%EC%96%B4%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0/","title":"커리어를 시작하며.."},{"content":"Hugo 블로그 Build 하기 지금까지 Hugo 테마를 세팅해보았고,\n이제는 Github.io 블로그에 업로드 해야합니다.\n그리고 업로드 전에 Build 과정이 필요합니다.\nhugo 명령어를 입력하면 build가 진행되고,\npublic 폴더 안에 html 파일이 생성됩니다.\nbuild가 진행된 모습 이렇게 생성된 public 폴더를 github.io에 올리면 완성입니다!\n일단 과정을 말씀드리자면..\nhugo build public 폴더를 github.io repo에 연결 github.io repo에 git add → commit → push 이 과정을 배포할때마다 진행하려면 상당히 번거롭고 실수할 가능성이 있습니다.\n그래서 바로 자동화를 해볼거에요.\n스크립트를 작성해서 스크립트를 실행시키는 방법도 있지만,\n앞으로 배포할때 아예 명령어를 사용하지 않기 위해\nGithub Actions로 배포를 자동화 하겠습니다!\nGithub Actions로 배포 자동화하기 .gitignore 설정 배포 설정을 하기에 앞서 먼저 .gitignore 설정을 해주겠습니다.\n1 2 3 4 5 public resources assets/jsconfig.json .hugo_build.lock .idea hugo 블로그 배포시 필요하지 않은 파일들을 제외하고,\npublic 폴더는 자동 배포 workflow에서 생성할 것이기에 제외했습니다.\nDeploy Key 생성 Github Actions 스크립트를 작성하기 전에\n먼저 Deploy Key를 생성 및 등록 해야합니다.\n아래 명령어에 깃허브 가입한 이메일을 입력하시면 deploy key가 발급됩니다.\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;{github_email}\u0026#34; 이 과정에서 입력사항이 3번 있습니다.\nkey를 생성할 위치를 확인하시고 엔터\n비밀번호 입력 후 엔터(비밀번호 없이도 가능)\n비밀번호 재입력 후 엔터\n해당 위치에 id_rsa와 id_rsa.pub 파일이 생성되었습니다.\nid_rsa는 private key이고 id_rsa.pub는 public key입니다.\n이 두가지를 깃허브에서 입력해줍니다.\nBlog Repository에 Key 세팅 먼저 blog repository에서 세팅을 하겠습니다.\nSettings → Secrets and variables → Actions → New Repository Secret\nSecret 이름을 입력하고 id_rsa 파일 내용을 입력합니다.\n파일은 메모장으로 여셔도 확인이 가능합니다.\n꼭 내용을 전부 복사해주셔야 해요!\n사진 참고해주세요! Github.io Repository에 Key 세팅 이번에는 github.io repository에서 세팅을 하겠습니다.\nSettings → Deploy keys → Add deploy key\nTitle을 입력하고 id_rsa.pub 파일 내용을 입력합니다.\n파일은 메모장으로 여셔도 확인이 가능합니다.\n꼭 내용을 전부 복사해주셔야 해요!\n그리고 Allow write access를 꼭 체크해주셔야\n해당 repository에 push가 가능합니다!\nGithub Actions workflow 작성 이제 드디어 deploy key 세팅을 끝내고 workflow를 작성합니다!\nblog 폴더에서 .github/workflows/deploy.yml 파일을 생성해주세요.\n→ .github 폴더 안에 workflows 폴더 안에 deploy.yml 파일 생성\n먼저 deploy.yml 파일에 작성할 내용을 보여드릴게요.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 name: Deploy Github.io on: workflow_dispatch: inputs: commitMessage: description: \u0026#39;Commit Message\u0026#39; required: true jobs: deploy: runs-on: ubuntu-20.04 steps: - name: Pull Blog Repo uses: actions/checkout@v3 with: submodules: true - name: Pull Github.io Repo into public uses: actions/checkout@v3 with: repository: cse0518/cse0518.github.io path: public - name: Remove All Except .git run: find ./public/* -name \u0026#39;.git\u0026#39; -prune -o -exec rm -rf {} \\; -prune - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo -t hugo-theme-stack - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.DEPLOY_KEY }} external_repository: cse0518/cse0518.github.io publish_branch: main publish_dir: ./public commit_message: ${{ github.event.inputs.commitMessage }} 이렇게 작성이 완료됩니다.\n내용을 하나하나 설명해볼게요!\n1 2 3 4 5 6 7 8 name: Deploy Github.io # workflow의 이름 지정 on: # 언제 workflow를 실행할지 설정 workflow_dispatch: # 직접 실행 버튼을 눌러서 실행 inputs: # workflow를 실행할때 입력받을 내용 추가 commitMessage: # 저는 commit message를 입력하기 위해 넣었습니다 description: \u0026#39;Commit Message\u0026#39; # 해당 입력값 설명 required: true # 필수로 입력되어야 하는지 여부 해당 workflow의 이름을 Deploy Github.io라고 지어줬습니다.\n그리고 저는 직접 실행 버튼을 눌러서 배포하려고 workflow_dispatch 옵션을 설정했습니다.\npush 또는 PR 할때마다 자동 배포되도록 설정하려면\non: [push, pull_request] 이런식으로도 설정 가능합니다.\n이런식으로 Actions 탭에서 버튼을 눌러 workflows를 실행할 수 있습니다.\n그리고 input을 입력 받으면 해당 값을 workflow 안에서 활용 가능합니다.\n1 2 3 4 jobs: # job들을 선언 deploy: # deploy라는 job runs-on: ubuntu-20.04 # 우분투 해당 버전에서 실행 steps: # step들을 차례대로 실행 여러개의 job을 선언하고 실행시킬 수 있습니다.\njob은 순서와 상관없이 병렬로 실행됩니다.\n그리고 하나의 job 안의 step들은 순서대로 실행됩니다.\n1 2 3 4 - name: Pull Blog Repo # step 이름 설정(생략 가능) uses: actions/checkout@v3 # 해당 repository로 checkout하여 내용을 pull 합니다. with: submodules: true # submodule을 함께 pull 합니다. 초기 우분투 환경에는 아무런 파일도 존재하지 않습니다.\n그래서 해당 blog repository 파일들을 받아와야합니다.\n그 과정이 actions/checkout 에서 일어납니다.\n그리고 theme를 submodule로 설정했기 때문에\nsubmodule을 함께 받아오려면 with: submodules: true 옵션을 추가해줍니다.\n1 2 3 4 5 6 7 8 9 - name: Pull Github.io Repo into public # step 이름 설정 uses: actions/checkout@v3 # pull with: repository: cse0518/cse0518.github.io # 해당 repository를 pull 합니다. path: public # public 폴더 안에 가져옵니다. - name: Remove All Except .git # step 이름 설정 # public 폴더 안에 .git을 제외한 모든 파일을 삭제 run: find ./public/* -name \u0026#39;.git\u0026#39; -prune -o -exec rm -rf {} \\; -prune hugo 명령어를 통해 빌드하고 public 폴더를 github.io repo와 연동해도 되지만,\n저는 반대로 public 폴더에 github.io repo를 받아오고\n이후에 빌드를 하도록 했습니다.\n.git 폴더를 제외하고 모든 파일을 삭제하면서 기존 파일은 삭제하고, 새롭게 빌드합니다.\n1 2 3 4 5 6 7 8 - name: Setup Hugo # step 이름 설정 uses: peaceiris/actions-hugo@v2 # hugo를 설치하는 오픈 소스 with: hugo-version: \u0026#39;latest\u0026#39; # 최신 버전 extended: true # extended 버전으로 - name: Build # step 이름 설정 run: hugo -t hugo-theme-stack # build 명령 hugo를 최신 extended 버전으로 설치하고, build 합니다.\n1 2 3 4 5 6 7 8 - name: Deploy # step 이름 설정 uses: peaceiris/actions-gh-pages@v3 # github actions 배포 오픈 소스 with: deploy_key: ${{ secrets.DEPLOY_KEY }} # deploy key external_repository: cse0518/cse0518.github.io # 배포할 repository 위치 publish_branch: main # 어떤 브랜치에 올릴지 설정 publish_dir: ./public # 어떤 경로의 파일들을 배포할지 설정 commit_message: ${{ github.event.inputs.commitMessage }} # 커밋 메세지 설정 이제 배포를 진행합니다.\n아까 생성한 deploy_key를 secrets에 등록했기 때문에\n${{ secrets.DEPLOY_KEY }}를 입력하면 설정한 값이 자동 입력됩니다.\npublic 폴더 안에 있는 파일들을 github.io repository의 main 브랜치에 올립니다.\n커밋 메세지를 입력받도록 설정했고, 입력 값을 커밋 메세지로 사용합니다.\n자동 배포 실행 혹시 hugo-theme-stack 테마의 exampleSite를 그대로 사용하시는 분들은\n먼저 content/post 폴더에 있는 rich-content 폴더를 삭제해주세요.\n이 게시글은 빌드가 안되는 내용이 포함되어 있습니다.\n이제 blog repository에 push하고 workflow를 실행시켜봅시다!\n해당 workflow로 자동 배포를 완료했습니다. blog repository에서 자유롭게 글을 작성하다가\n글 작성이 완료되었을때 배포 workflow를 실행해주면 빠르게 배포가 가능합니다!\n혹시 안되는 점이 있다면 댓글을 달아주세요!\n최대한 빠르게 답변드리겠습니다.\n","date":"2023-04-09T22:30:00+09:00","permalink":"/posts/hugo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/","title":"Hugo 블로그 자동 배포하기"},{"content":"서론 취업한 기념으로..\n기술 블로그를 제대로 세팅해보려고 다양한 포맷을 찾아보았습니다.\nvelog, tistory 보다는 커스텀이 가능한 oopy(notion 기반), github.io로 추려졌고,\n아무래도 oopy는 지속적인 비용이 발생하기에..\n기존에 있던 github.io 블로그에 새로운 테마를 적용하기로 결정했습니다!\n다양한 블로그 테마를 찾아보다가 Hugo에서 원하는 테마를 발견했습니다.\nhugo-theme-stack\n이 테마를 적용하기로 결정! 하지만 세팅을 완료하면서 굉장히 많은 시행착오를 겪었기에..\n다른분들은 좀 더 쉽게 하시길 바라며 Hugo 블로그 세팅법을 포스팅 해봅니다!\n참고 사항\n운영체제 : Windows 10, 11 기본 준비사항 : Git 설치, Github 가입 Github.io 블로그에 Hugo 테마를 적용하는 상황에 맞춰진 게시글입니다. 더 자세한 내용이 필요하시면 공식 문서를 참고해주세요. 다음 포스팅에서는 Github.io Repository를 submodule로 두지 않고 Github Actions를 이용하여 배포하는 방법을 알려드립니다. Hugo 설치하기 먼저 Hugo를 설치해야합니다.\n그리고 Hugo extended 버전에서는 SCSS/SASS를 지원합니다.\n대부분 SCSS를 사용하기 때문에 꼭 extended 버전을 설치해주셔야 합니다!\nHugo Installation\n이곳에서 각각의 운영체제에 맞게 설치하시면 되고,\n저는 Windows 환경에서 설치하는 방법을 보여드릴게요!\nPackage Manager 설치 Hugo를 Windows 환경에 설치하기 위해서는 패키지 매니저가 필요합니다.\n먼저 chocolatey라는 윈도우 환경 패키지 매니저를 다운받습니다.\nPowerShell을 관리자 권한으로 실행\n→ 윈도우 키를 누르고 powershell을 입력하시면 됩니다.\n→ 관리자 권한으로 실행!\nPowerShell에 아래 명령어를 입력하면 chocolatey가 설치됩니다.\n1 Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;)) 설치가 완료되었는지 확인하려면 PowerShell에 choco라는 명령어를 입력해보세요!\nchocolatey 버전 정보가 나온다면 설치가 완료된 상태입니다.\nHugo 설치 이제 Hugo를 설치할 수 있습니다!\nPowerShell에 아래 명령어를 입력하면 Hugo가 설치됩니다. (extended 버전)\n1 choco install hugo-extended -confirm 설치가 완료되었는지 확인하려면 PowerShell에 hugo version이라는 명령어를 입력해보세요!\nhugo 버전 정보가 나온다면 설치가 완료된 상태입니다.\n블로그 세팅하기 먼저 hugo 블로그 테마의 특징을 말씀드리자면\nhugo의 폴더 구조에 맞춰서 markdown 양식의 게시글을 작성하고,\nhugo 명령어를 통해 html 파일로 변환해서 웹 사이트로 보여지게 됩니다.\n따라서 저는 두 개의 git repository를 생성해서\n하나의 repository에서는 hugo 블로그 테마의 파일들을 관리하고, 다른 하나의 repository(github.io)에서는 html 파일로 변환한 내용들만 관리하도록 세팅했습니다.\n두 개의 git repository 세팅 Blog repository\n먼저 hugo 블로그 테마의 파일들을 관리할 repository를 생성합니다.\nrepository 이름은 마음대로 설정해주시면 됩니다. 저는 blog로 설정했어요!\n그리고 편의상 앞으로 이 repository를 blog repository라고 부르겠습니다.\n이 repository는 private repo로 설정하셔도 됩니다.\nGithub.io repository\n그리고 github.io 블로그 repository를 생성합니다.\n이 repository는 이름을 꼭 {Github_닉네임}.github.io로 설정하셔야 해요!\n그래야 github page가 생성됩니다.\n제 github 닉네임은 cse0518이므로 repository 이름을 cse0518.github.io로 설정했습니다.\n이 repository는 꼭 public repo로 설정하셔야 됩니다.\nhugo 블로그 생성 이제는 기본적인 Hugo 블로그 틀을 생성합니다.\n블로그 폴더를 생성할 위치에서 hugo new site {폴더명} 명령어를 입력합니다.\n1 hugo new site {폴더명} 저는 Documents 위치에서 blog라는 폴더명으로 블로그 틀을 만들었습니다.\n그리고 아까 만들어놓은 blog repository를 새로 만든 폴더(blog)에 연동하겠습니다.\ncd blog 명령어로 blog 폴더로 이동\n→ git init 명령어로 git 저장소 생성\n→ git remote add origin {repository_URL} 명령어로 원격 저장소를 연동합니다.\n아까 생성한 blog repository의 URL 주소를 넣으시면 됩니다!\n혹시 안된다면 clone 해오셔도 됩니다. 그럼 repository 연동이 완료되었고, 이제 테마를 적용해보겠습니다!\nhugo 테마 세팅 블로그 폴더에 themes 라는 폴더가 있습니다.\n이 폴더안에 테마를 받아서 연결하는 작업을 해보겠습니다.\n저는 hugo-theme-stack이라는 테마를 기준으로 설명하겠습니다! 먼저 테마 깃허브 링크를 복사해주시고,\ngit submodule add -b master {복사한_URL} themes/{테마_이름} 명령어를 입력합니다.\n1 git submodule add -b master {테마_Github_URL} themes/{테마_이름} 해당 테마가 themes/{테마_이름} 위치에 서브 모듈로 추가됩니다.\n이제 이 테마를 설정 파일(config.toml)에 등록해줍니다.\n1 theme = \u0026#39;{테마_이름}\u0026#39; 그리고 hugo server 명령어를 입력해 실행해보면 블로그 서버가 실행됩니다.\nlocalhost:1313으로 접속하라고 나오네요.\n종료할때는 Ctrl + C를 누르시면 됩니다.\n테마가 적용된 것을 확인할 수 있습니다! 이제 설정을 커스터마이징하고, 포스트를 작성하시면 됩니다.\n일단 themes/{테마_이름} 폴더에 있는 exampleSite를 적용하시고 감 잡으시는 것을 추천드립니다!\nexampleSite의 content 폴더 내부 파일들을\nblog 폴더의 content 폴더로 그대로 복사하시고,\nexampleSite의 설정 파일(config.yaml)을 blog 폴더로 복사하시면 됩니다.\n그리고 blog 폴더의 toml 파일은 삭제하면 yaml 파일로 적용이 됩니다.\n적용된 모습! config 파일 커스터마이징 config 파일을 수정하시면서 커스터마이징을 하면 되는데,\n중요한 부분만 가볍게 설명해볼게요!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 DefaultContentLanguage: en # ko로 설정하면 한국어로 보여집니다. timeZone: Asia/Seoul # 한국 타임존 설정 paginate: 5 # 한 페이지에 게시글이 몇 개씩 보여지는지 설정 title: 최승은 (Choi SeungEun) # 좌측 타이틀 설정 # params 하위 설정 params: favicon: /favicon.ico # static/img/favicon.ico 위치에 파비콘 이미지 저장 footer: # 블로그 최하단부에 몇년도부터 블로그를 운영했는지와 커스텀 텍스트 설정 since: 2021 customText: Choi SeungEun Tech Blog sidebar: emoji: 😎 # 좌측 개인 사진 옆 이모지 설정 subtitle: Back-end Engineer # 타이틀 하단 부제 설정 avatar: # 좌측 개인 사진 설정 src: img/avatar.png # assets/img/avatar.png 위치에 개인 사진 저장 comments: # 댓글 설정 enabled: true provider: utterances # 원하는 댓글 앱 지정 utterances: # 저는 utterances 댓글 앱으로 설정했습니다 repo: \u0026#34;cse0518/cse0518.github.io\u0026#34; # 댓글이 달리면 이슈가 생성될 repository issueTerm: pathname # 이슈 제목 widgets: homepage: # 블로그 홈 화면 우측에 위젯 설정 - type: search - type: archives params: limit: 3 # 최대 몇 개의 년도를 보여줄지 설정 - type: categories params: limit: 10 # 최대 몇 개의 카테고리를 보여줄지 설정 - type: tag-cloud params: limit: 10 # 최대 몇 개의 태그를 보여줄지 설정 # menu 하위 설정 menu: social: # 좌측 타이틀 하단에 소셜 링크 설정(깃허브 등) - identifier: mail # 별칭 name: Mail # 실제 표시될 이름 url: mailto:csedev0518@gmail.com # 연결될 주소(URL) weight: 1 # 몇 번째 순서로 표시될지 설정 params: icon: mail # assets/icons/mail.svg 위치에 아이콘 저장 - identifier: github name: GitHub url: https://github.com/cse0518 weight: 3 params: icon: brand-github # markup 하위 설정 markup: goldmark: renderer: unsafe: true # true로 설정 시 html 태그 활용 가능 파비콘 설정\nstatic/img/favicon.ico 위치에 파비콘 이미지를 저장하고,\nconfig 설정에서 params: favicon: /favicon.ico을 등록해주면\n아래 사진에 최승은 Tech Blog 좌측 파비콘 설정이 가능합니다!\n좌측 메뉴 설정\navatar → params: sidebar: avatar: src: {아바타_저장위치} 설정\nemoji → params: sidebar: emoji: {이모지} 설정\ntitle → title: {타이틀} 설정\nsubtitle → params: sidebar: subtitle: {서브_타이틀} 설정\nsocial menu → menu: social: {소셜_메뉴} 설정\nmain menu → content/page 위치에 설정\n저는 content/_index.md 파일에 Home 메뉴를 설정했고,\ncontent/page/ 위치에 about, archives, search 메뉴를 설정했습니다.\n1 2 3 4 5 6 7 8 9 \u0026lt;!-- Home 메뉴 md 파일 예시 --\u0026gt; --- menu: main: name: Home weight: 2 params: icon: home --- 댓글 설정(utterances) 게시글에 댓글을 달 수 있게 설정이 가능합니다.\n저는 utterances 댓글 앱으로 설정했습니다.\nutterances 댓글은 깃허브 로그인으로 간편하게 댓글을 작성할 수 있고,\n무료로 광고 없이 빠르게 이용 가능합니다.\n그리고 댓글이 달리면 github issue로 확인도 가능합니다!\nhttps://github.com/apps/utterances에서 설치가 가능합니다.\n먼저 어떤 repository에 알림이 가도록 할지 선택합니다.\n저는 github.io repository에만 issue 알림이 오도록 연동했습니다.\nInstall 버튼을 누르시면 됩니다!\n다음 페이지에서 repository 이름을 작성해주시고(ex. cse0518/cse0518.github.io),\nissue가 어떤 제목으로 생성될 지 설정합니다.\npathname이나 URL로 설정하는게 빠르게 확인하기에 좋을 것 같습니다!\n다음 나오는 Theme를 확인하시고, config 파일에 적용하시면 됩니다.\n1 2 3 4 5 6 7 8 # params 하위 설정 params: comments: # 댓글 설정 enabled: true provider: utterances # utterances 댓글 활성화 utterances: repo: \u0026#34;cse0518/cse0518.github.io\u0026#34; # 댓글이 달리면 issue가 생성될 repository issueTerm: pathname # issue 제목 다음과 같이 댓글 앱이 활성화됩니다!\n다음 포스팅 예고 이제 블로그를 Github.io에 배포하는 일만 남았습니다.\n배포하는 방법은 다양합니다.\n수작업으로 하나하나..\n또는 스크립트를 작성해놓고 실행..\n또는 Github Actions를 활용해서 배포 자동화!\n다음 포스팅에서 Github Actions를 활용한 배포 자동화를 알려드리겠습니다.\n","date":"2023-04-06T22:30:00+09:00","permalink":"/posts/hugo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/","title":"Github.io 블로그에 Hugo 테마 세팅하기"},{"content":"디자인 패턴이란? 소프트웨어를 설계하는 원칙을 최종적으로 정의한 것이 SOLID 원칙이었고, 이 원칙을 지키며 설계를 해보니 공통적인 23가지의 패턴이 있었다. 이렇게 23가지의 디자인 패턴이 등장하게 되었다.\nGoF(Gang of Four) : 디자인 패턴을 구체화하고 체계화한 4인\n에리히 감마(Erich Gamma), 리차드 헬름(Richard Helm), 랄프 존슨(Ralph Johnson), 존 블리시디스(John Vissides)\n디자인 패턴을 잘 사용하면 효율성과 재사용성을 높일 수 있으며, 설계 자료를 유형별로 분류하면 개발 기간을 둘이고 유지보수도 매우 쉬워질 수 있다. 디자인 패턴은 알고리즘처럼 프로그램 코드로 변환하여 바로 사용할 수 있는 것은 아니지만 유사한 상황에서 구조적인 문제를 해결할 수 있는 방안을 제시해준다.\n디자인 패턴의 분류 디자인 패턴은 생성(Creational), 구조(Structural), 행위(Behavioral) 패턴 3가지로 분류된다.\n생성 패턴 Abstract Factory Pattern (추상 팩토리 패턴)\n구체적인 클래스를 지정하지 않고 관련성을 갖는 객체들의 집합을 생성하거나 서로 독립적인 객체들의 집합을 생성할 수 있는 인터페이스를 제공하는 패턴이다.\nBuilder Pattern\n복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴이다.\nFactory Method Pattern\n객체를 생성하는 인터페이스는 미리 정의하되, 인스턴스를 만들 클래스의 결정은 서브클래스 쪽에서 내리는 패턴이다. 팩토리 메소드 패턴에서는 클래스의 인스턴스를 만드는 시점을 서브클래스로 미룬다.\nPrototype Pattern\n생성할 객체의 종류를 명세화하는 데에 원형이 되는 예시물을 이용하고, 그 원형을 복사함으로써 새로운 객체를 생성하는 패턴이다.\nSingleton Pattern\n어떤 클래스의 인스턴스는 오직 하나임을 보장하며, 이 인스턴스에 접근할 수 있는 전역적인 접촉점을 제공하는 패턴이다.\n구조 패턴 Adapter Pattern\n클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스로 변환하는 패턴으로, 호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 함께 작동하도록 한다.\nBridge Pattern\n구현부에서 추상층을 분리하여 각자 독립적으로 변형할 수 있게 하는 패턴이다.\nComposite Pattern\n객체들의 관계를 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴으로, 사용자가 단일 객체와 복합 객체 모두 동일하게 다루도록 한다.\nDecorator Pattern\n주어진 상황 및 용도에 따라 어떤 객체에 책임을 덧붙이는 패턴으로, 기능 확장이 필요할 때 서브클래싱 대신 쓸 수 있는 유연한 대안이 될 수 있다.\nFacade Pattern\n서브시스템에 있는 인터페이스 집합에 대해서 하나의 통합된 인터페이스를 제공하는 패턴으로, 서브시스템을 좀더 사용하기 편하게 만드는 상위 수준의 인터페이스를 정의한다.\nFlyweight Pattern\n크기가 작은객체가 여러개 있을 때, 공유를 통해 이들을 효율적으로 지원하는 패턴이다.\nProxy Pattern\n어떤 다른 객체로 접근하는 것을 통제하기 위해서 그 객체의 대리자(surrogate), 또는 자리채움자(placeholder)를 제공하는 패턴이다.\n행위 패턴 Chain of Responsibility Pattern (책임 연쇄 패턴)\n요청을 처리할 수 있는 기회를 하나 이상의 객체에게 부여하여 요청을 보내는 객체와 그 요청을 받는 객체 사이의 결합을 피하는 패턴이다.\n요청을 받을 수 있는 객체를 연쇄적으로 묶고, 실제 요청을 처리한 객체를 만날 때까지 객체 고리를 따라서 요청을 전달한다.\nCommand Pattern\n요청을 객체의 형태로 캡슐화하여, 서로 요청이 다른 사용자의 매개변수화, 요청 저장 또는 로깅, 그리고 연산의 취소를 지원하게 만드는 패턴이다.\nInterpreter Pattern\n주어진 언어에 대해, 그 언어의 문법을 위한 표현 수단을 정의하고, 이와 아울러 그 표현 수단을 사용하여 해당 언어로 작성된 문장을 해석하는 해석기를 정의하는 패턴이다.\nIterator Pattern\n내부 표현부를 노출하지 않고 어떤 객체 집합에 속한 원소들을 순차적으로 접근할 수 있는 방법을 제공하는 패턴이다.\nMediator Pattern\n한 집합에 속해있는 객체들의 상호작용을 캡슐화하는 객체를 정의하는 패턴이다.\n객체들이 직접 서로를 참조하지 않도록 함으로써 객체들 사이의 소결합(loose coupling)을 촉진시키며, 개발자가 객체들의 상호작용을 독립적으로 다양화시킬 수 있게 만든다.\nMemento Pattern\n캡슐화를 위배하지 않는 채 어떤 객체의 내부 상태를 잡아내고 신체화시켜, 이후에 해당 객체가 그 상태로 다시 되돌아올 수 있도록 하는 패턴이다.\nObserver Pattern\n객체 사이에 일 대 다의 의존 관계를 정의해 두어, 어떤 객체의 상태가 변할 때 그 객체에 의존성을 가진 다른 객체들이 그 변화를 통지받고 자동으로 갱신될 수 있게 만드는 패턴이다.\nState Pattern\n객체의 내부 상태에 따라 스스로 행동을 변경할 수 있게끔 허가하는 패턴으로, 이렇게 하면 객체는 마치 자신의 클래스를 바꾸는 것 처럼 보인다.\nStrategy Pattern\n동일 계열의 알고리즘군을 정의하고, 각각의 알고리즘을 캡슐화하며, 이들을 상호교환이 가능하도 록 만드는 패턴이다.\n알고리즘을 사용하는 사용자와 상관없이 독립적으로 알고리즘을 다양하게 변경할 수 있게 한다.\nTemplate Method Pattern\n객체의 연산에는 알고리즘의 뼈대만을 정의하고 각 단계에서 수행할 구체적 처리는 서브클래스 쪽으로 미루는 패턴이다.\n알고리즘의 구조 자체는 그대로 놔둔 채 알고리즘 각 단계의 처리를 서브클래스에서 재정의할 수 있게 한다.\nVisitor Pattern\n객체 구조를 이루는 원소에 대해 수행할 연산을 표현하는 패턴으로, 연산을 적용할 원소의 클래스를 변경하지 않고도 새로운 연산을 정의할 수 있게 한다.\nReferences [Design Pattern] 디자인 패턴 종류\nGOF 디자인 패턴 23가지\n객체지향 디자인패턴 1\n객체지향 디자인패턴 2\n","date":"2021-08-07T12:30:00+09:00","permalink":"/posts/23%EA%B0%80%EC%A7%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/","title":"23가지 디자인 패턴"},{"content":"java.lang 패키지에는 Object 클래스가 포함되어 있다. 그리고 이 Object 클래스는 모든 Java 클래스의 최고 상위 클래스로 모든 클래스는 Object 클래스를 상속받는다.\n따라서 Java의 모든 클래스들은 Object 클래스의 모든 메소드를 바로 사용할 수 있고, 이것을 잘 익혀놓으면 다양하게 활용할 수 있다.\n총 11개의 메소드로 구성되어 있고, 주로 toString(), equals(), hashCode(), clone()을 override 해서 사용한다.\n메소드들을 좀더 자세히 알아보겠다.\nObject Class의 11가지 method Method 설명 protected Object clone() 해당 객체의 복제본을 생성하여 반환함. boolean equals(Object obj) 해당 객체와 전달받은 객체가 같은지 여부를 반환함. protected void finalize() 해당 객체를 더는 아무도 참조하지 않아 가비지 컬렉터가 객체의 리소스를 정리하기 위해 호출함. Class\u0026lt;T\u0026gt; getClass() 해당 객체의 클래스 타입을 반환함. int hashCode() 해당 객체의 해시 코드값을 반환함. void notify() 해당 객체의 대기(wait)하고 있는 하나의 스레드를 다시 실행할 때 호출함. void notifyAll() 해당 객체의 대기(wait)하고 있는 모든 스레드를 다시 실행할 때 호출함. String toString() 해당 객체의 정보를 문자열로 반환함. void wait() 해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행할 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함. void wait(long timeout) 해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행하거나 전달받은 시간이 지날 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함. void wait(long timeout, int nanos) 해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행하거나 전달받은 시간이 지나거나 다른 스레드가 현재 스레드를 인터럽트 할 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함. toString() toString() method는 해당 인스턴스의 정보를 문자열로 반환한다.\n클래스 이름과 구분자 \u0026lsquo;@\u0026rsquo;, 그 뒤에 16진수 해시 코드가 반환된다.\ntoString()의 원형 getClass().getName() + '@' + Integer.toHexString(hashCode())\n1 2 3 4 5 6 7 8 9 10 11 class TestMethod {...} class Main { public static void main(String args[]) { TestMethod test01 = new TestMethod(); TestMethod test02 = new TestMethod(); System.out.println(test01.toString()); System.out.println(test02.toString()); } } 실행 결과\n1 2 TestMethod@2c7b84de TestMethod@3fee733d String String 객체를 출력하면 String 객체가 저장하고 있는 문자열이 출력된다.\njdk의 String 클래스는 toString()을 override하고 있기 때문이다.\n1 2 String test = new String(\u0026#34;Test\u0026#34;); System.out.println(test); 실행 결과\n1 Test 그렇다면 이 toString()을 어떤 경우에 override해서 사용할까?\n예를 들어 보겠다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class Song { private String title; private String singer; public Song(String title, String singer) { this.title = title; this.singer = singer; } @Override public String toString() { return \u0026#34;Song{title=\u0026#39;\u0026#34; + title + \u0026#34;\u0026#39;, singer=\u0026#39;\u0026#34; + singer + \u0026#34;\u0026#39;}\u0026#34;; } public static void main(String[] args) { Song song = new Song(\u0026#34;노래 제목\u0026#34;, \u0026#34;가수\u0026#34;); System.out.println(song); } } 실행 결과\n1 Song{title=\u0026#39;노래 제목\u0026#39;, singer=\u0026#39;가수\u0026#39;} 이렇게 객체의 정보를 문자열 형태로 표현하고자 할 때,\n공통적으로 출력되어야 하는 형태가 있는 경우,\ntoString()을 override해서 return 값을 바꿔줄 수 있다.\nequals() equals() method는 두 객체가 같은 객체인지 비교할 때 사용한다.\n여기서 동등성과 동일성에 대해 생각해볼 필요가 있다.\n주로 primitive type의 자료형이 같은 지를 비교할 때 \u0026rsquo;==\u0026rsquo; 연산자를 사용하는데, 이는 두 object가 같은 정보를 담고 있는지를 비교한다. 즉, 동등한지를 비교한다.\n그리고 두 객체가 같은 지를 비교할 때는 equals() method를 사용하는데, 이는 두 object가 완전히 같은, 동일한 object인지 비교하는 것이다.\n두 객체가 같은 주소값을 가지는 같은 객체라는 것이 동일하다고 표현된다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class User { int id; String name; public User(int id, String name) { this.id = id; this.name = name; } public boolean equals(Object obj) { return (this == obj); } public static void main(String[] args) { User user1 = new User(1000, \u0026#34;최승은\u0026#34;); User user2 = new User(1000, \u0026#34;최승은\u0026#34;); // 두 개의 다른 객체가 같은 값을 가지고 있다. System.out.println(user1.equals(user2)); // 서로 다른 객체이기 때문에 false user1 = user2; // 두 변수가 같은 주소를 가리키게 된다. System.out.println(user1.equals(user2)); // 같은 주소값의 같은 객체이기 때문에 true } } 실행 결과\n1 2 false true equals() 기본 형태 1 2 3 public boolean equals(Object obj) { return (this == obj); } equals의 기본 형태는 이렇다. object가 동일한지를 비교하는 것이다.\n그렇다면 equals()는 어떤 경우에 override해서 사용할까?\n예를 들어 보겠다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class User { int id; String name; public User(int id, String name) { this.id = id; this.name = name; } public int getId() { return id; } @Override public boolean equals(Object obj) { if (obj instanceof User) { return this.getId() == ((User)obj).getId(); } else { return false; } } public static void main(String[] args) { User user1 = new User(1000, \u0026#34;최승은\u0026#34;); User user2 = new User(1000, \u0026#34;최승은\u0026#34;); System.out.println(user1.equals(user2)); } } 실행 결과\n1 true 위의 예시처럼 두 객체가 같은 해시코드 값을 갖는지 비교하는 내용으로 override를 하여 사용한다.\nhashCode() 해시코드란 JVM이 인스턴스를 생성할 때 메모리 주소를 변환해서 부여하는 코드이다.\n실제 메모리 주소값과는 별개이며, 실제 메모리 주소는 System 클래스의 identityHashCode()로 확인할 수 있다.\n자바에서의 동일성은 equals()의 반환값이 true, hashCode() 반환값이 동일함을 의미한다.\n그래서 일반적으로 equals()와 hashCode()는 함께 override 한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class User { int id; String name; public User(int id, String name) { this.id = id; this.name = name; } public int getId() { return id; } @Override public boolean equals(Object obj) { if (obj instanceof User) { return this.getId() == ((User)obj).getId(); } else { return false; } } @Override public int hashCode() { return getId(); } public static void main(String[] args) { User user1 = new User(1000, \u0026#34;최승은\u0026#34;); User user2 = new User(1000, \u0026#34;최승은\u0026#34;); System.out.println(\u0026#34;user1.equals(user2): \u0026#34; + user1.equals(user2)); System.out.println(\u0026#34;user1.hashCode(): \u0026#34; + user1.hashCode()); System.out.println(\u0026#34;user2.hashCode(): \u0026#34; + user2.hashCode()); System.out.println(\u0026#34;System.identityHashCode(user1): \u0026#34; + System.identityHashCode(user1)); System.out.println(\u0026#34;System.identityHashCode(user2): \u0026#34; + System.identityHashCode(user2)); } } 실행 결과\n1 2 3 4 5 user1.equals(user2): true user1.hashCode(): 1000 user2.hashCode(): 1000 System.identityHashCode(user1): 1804094807 System.identityHashCode(user2): 951007336 위의 예시는 id를 해시코드 값으로 반환하여 출력하게 된다.\n이렇게 두 개의 서로 다른 메모리에 위치한 객체가 동일성을 갖기 위해 override를 하게 된다.\nWrapper class Integer 클래스도 Object 클래스의 hashCode()를 override하고 있다.\n1 2 3 4 5 6 7 Integer a = new Integer(1); Integer b = new Integer(1); System.out.println(a == b); System.out.println(a.equals(b)); System.out.println(\u0026#34;a.hashCode(): \u0026#34; + a.hashCode()); System.out.println(\u0026#34;b.hashCode(): \u0026#34; + b.hashCode()); 실행 결과\n1 2 3 4 false true a.hashCode(): 1 b.hashCode(): 1 위 코드를 보면 a 객체와 b 객체는 같은 값을 갖지만 따로 생성된 다른 객체이다. 따라서 \u0026lsquo;==\u0026rsquo; 연산자를 사용하여 비교하면 false가 나온다.\n하지만 equals() 메소드를 사용하여 비교하면 true가 나온다. 그 이유는 같은 hashcode 주소값을 갖기 때문이다.\njava.lang에 있는 integer 클래스를 보면 hashCode() 메소드가 override 되어있는것을 확인할 수 있다.\n1 2 3 4 @Override public int hashCode() { return Integer.hashCode(value); } clone() clone() method는 객체를 복제할 때 사용하며, private 필드도 복제할 수 있기 때문에 정보은닉에 위배될 수 있다.\n따라서 인터페이스가 명시돼있는 클래스만 clone()을 통해 객체를 복제할 수 있다.\nfinalize() finalize() method는 직접 호출하는 메소드가 아니라 객체가 힙 메모리에서 해제될 때 가비지콜렉터가 호출하는 메소드이다.\n이 메소드가 override 되어있으면 가비지콜렉터가 이 메소드를 호출하여 실행한다.\n즉, finalize()에는 객체가 해제될 때 리소스 해제, 소켓 close 등의 필요한 것들을 구현해주면 된다.\nReferences 오라클 api 공식 문서\nObject 클래스\n자바 Object 클래스 정리 - toString(), equals(), hashCode(), clone()\n","date":"2021-08-04T22:40:00+09:00","permalink":"/posts/object-class/","title":"Object Class"},{"content":"Java에는 기본적으로 제공하는 api들이 있다. 이에 대한 내용은 오라클 공식 문서에 자세히 기재되어 있다.\njava의 기본 패키지들은 따로 import 하지 않아도 기본적으로 사용할 수 있기 떄문에 이를 잘 활용하는 것이 필요하다.\n본 포스팅에서는 String, StringBuffer, StringBuilder에 대해 알아보려고 한다.\njava.lang package에 포함되어 있는 String, StringBuffer, StringBuilder classes String 먼저 String에 대한 문서 내용을 확인해보면 Serializable, Comparable, CharSequence 인터페이스가 상속되어 있고, public final class로 되어 있다. serialize가 가능하며 문자열이고 비교가능한 값이라는 것을 알 수 있다. 또한 final class이기 때문에 String class를 상속받을 수는 없다.\nConstant Pool Java에서는 String을 특별하게 취급한다. Java heap 영역 안에 String constant pool이 존재하는데, String을 literal로 생성하면 Heap 영역 안에 있는 constant pool에 저장되어 재사용된다.\n그림으로 나타내면 아래와 같다.\nString 객체를 생성하여 저장하면 중복되는 값도 계속 heap 영역에 저장되기 때문에 메모리 낭비가 생긴다. 따라서 중복되는 문자열은 literal로 생성하여 constant pool에 저장되게 하는게 유리하다. constant pool에 저장된 문자열은 같은 주소값을 참조한다는 점도 참고하여 코드 설계에 적용하는것이 좋다.\n추가로 String 객체를 생성하여 intern() 메소드를 호출하면 constant pool에 접근하여 이미 있는 문자열을 참조할 수 있다.\n그리고 문자열을 더할때는 StringBuffer 또는 StringBuilder를 사용하여 구현한다고 한다.\n왜 단순히 문자열에 계속 문자를 더하지 않고, StringBuffer와 StringBuilder을 이용하는 것일까?\n좀 더 자세히 알아보자.\nStringBuffer StringBuffer는 문자열을 추가하거나 변경 할 때 주로 사용하는 자료형이다.\n실제로 어떻게 다른지 확인해보자.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 문자열 test1의 값과 주소값 확인 String test1 = \u0026#34;TEST 1\u0026#34;; System.out.println(\u0026#34;test1: \u0026#34; + test1); System.out.println(\u0026#34;test1 reference: \u0026#34; + test1.hashCode()); // 문자열에 한 글자씩 더하여 주소값 확인 for (int a = 0; a = 3; a++) { test1 += a; System.out.println(\u0026#34;test1: \u0026#34; + test1); System.out.println(\u0026#34;test1 reference: \u0026#34; + test1.hashCode()); } // StringBuffer 생성 StringBuffer sb = new StringBuffer(); // StringBuffer에 문자를 append 하고 주소값 확인 for (int a = 0; a = 3; a++) { sb.append(a); System.out.println(\u0026#34;sb: \u0026#34; + sb); System.out.println(\u0026#34;sb reference: \u0026#34; + sb.hashCode()); } 실행 결과\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 test1: TEST 1 test1 reference: -1823841245 test1: TEST 10 test1 reference: -704503699 test1: TEST 101 test1 reference: -364778140 test1: TEST 1012 test1 reference: 1576779598 sb: 0 sb reference: 471910020 sb: 01 sb reference: 471910020 sb: 012 sb reference: 471910020 위의 경우처럼 단순히 문자열에 한 글자를 더하게 되면, 새로운 주소값을 갖는 새 문자열을 생성하여 저장하게 된다. 이렇게 문자열에 문자를 반복적으로 수정이 이뤄지는 상황은 비효율적이다. 이러한 경우 StringBuffer를 사용하여 문자를 append 해주면 같은 주소값을 참조하여 하나의 문자열에 계속 추가를 해주게 되어 더 효율적인 것이다.\n그럼 String에 새로운 문자를 추가하면 왜 새로운 문자열을 만들어 버리는것일까?\n여기서 알아야될 것은 사실 String은 char형의 배열 형태라는 점이다. String은 private final char value[]; 라고 선언이 되어있어서 한 번 만들어지면 변경이 불가하다. 때문에 새로운 문자를 추가하면 새로운 문자열로 만들어지는 것이다.\nStringBuilder와 StringBuffer 그렇다면 StringBuilder는 또 무엇인가? StringBuilder와 StringBuffer 둘 다 변경 가능한 문자열이지만 차이점이 존재한다.\nStringBuilder synchronization 적용되지 않음(비동기적) 단일 스레드에서 StringBuffer보다 연산처리가 빠르다. StringBuffer synchronization 적용(동기적) 여러 스레드에서 사용하기에 안전 싱글 스레드 환경에서 StringBuilder와 StringBuffer의 성능을 직접 비교해보면 다음과 같다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 StringBuffer sBuffer = new StringBuffer(); StringBuilder sBuilder = new StringBuilder(); new Thread(() -\u0026gt; { long startTime = System.currentTimeMillis(); for (int i = 0; i \u0026lt; 10000000; i++) { sBuffer.append(i); } long endTime = System.currentTimeMillis(); // StringBuffer에 1천만번 append를 한 시작 시간과 끝난 시간 비교 System.out.println(\u0026#34;StringBuffer -\u0026gt; \u0026#34; + (endTime - startTime)); }).start(); new Thread(() -\u0026gt; { long startTime = System.currentTimeMillis(); for (int i = 0; i \u0026lt; 10000000; i++) { sBuilder.append(i); } long endTime = System.currentTimeMillis(); // StringBuilder에 1천만번 append를 한 시작 시간과 끝난 시간 비교 System.out.println(\u0026#34;StringBuilder -\u0026gt; \u0026#34; + (endTime - startTime)); }).start(); 실행 결과\n1 2 StringBuilder -\u0026gt; 637 StringBuffer -\u0026gt; 849 하나의 스레드에서는 StringBuilder가 조금 더 빠른것을 확인할 수 있다.\n결론적으로 하나의 스레드라면 지역 변수로 StringBuilder를, 여러개의 스레드라면 전역 변수로 StringBuffer를 사용하는 것이 효과적이다.\nReferences 오라클 api 공식 문서\nJava에서 String, StringBuilder, StringBuffer의 차이\nString, StringBuffer, StringBuilder\n","date":"2021-08-03T23:00:00+09:00","permalink":"/posts/stringbuffer-stringbuilder/","title":"StringBuffer와 StringBuilder"}]