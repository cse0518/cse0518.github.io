<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on 최승은 (Choi SeungEun)</title><link>/categories/programming/</link><description>Recent content in Programming on 최승은 (Choi SeungEun)</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 14 May 2023 22:00:00 +0900</lastBuildDate><atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS 서비스 파악하기 - ECS, EKS</title><link>/posts/aws-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0-2/</link><pubDate>Sun, 14 May 2023 22:00:00 +0900</pubDate><guid>/posts/aws-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0-2/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.wanted.co.kr/events/pre_challenge_be_6" target="_blank" rel="noopener"
>원티드 프리온보딩 4월 백엔드 챌린지&lt;/a>에서&lt;br>
도커를 활용하여 클라우드 배포까지 해보는 특강을 진행했다.&lt;/p>
&lt;p>최근에 개인적으로 도커를 많이 사용하면서&lt;br>
도커를 활용할 수 있는 다양한 정보를 접하고 싶었는데&lt;br>
때마침 특강을 진행해서 감사히 듣게 되었다.&lt;/p>
&lt;p>이미 알고 있던 기본적인 도커 개념과 활용 방법을 확실히 정리할 수 있어서 좋았고,&lt;br>
가장 집중해서 본 부분은 클라우드 환경에서 ECS 또는 EKS를 사용하여&lt;br>
도커를 활용하는 부분이었다.&lt;/p>
&lt;p>ECS와 EKS에 대한 내용을 정리하고, 나중에 잘 활용해보고자&lt;br>
블로그에 포스팅하게 되었다.&lt;/p>
&lt;br/>
&lt;h2 id="eks-elastic-kubernetes-service">EKS (Elastic Kubernetes Service)&lt;/h2>
&lt;ul>
&lt;li>관리형 쿠버네티스 서비스&lt;/li>
&lt;li>사용자는 쿠버네티스 API를 사용하여 EKS 클러스터를 관리할 수 있다.&lt;/li>
&lt;li>다양한 AWS 서비스와의 통합을 제공한다.&lt;/li>
&lt;li>쿠버네티스 기반의 컨테이너 오케스트레이션을 가능하게 하며,&lt;br>
이미 쿠버네티스에 익숙한 사용자 또는&lt;br>
복잡한 애플리케이션 아키텍처를 가진 사용자에게 적합한 옵션이다.&lt;/li>
&lt;li>복잡한 애플리케이션 아키텍처와 고도로 확장 가능한 환경을 구축할 수 있다.&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h2 id="ecs-elastic-container-service">ECS (Elastic Container Service)&lt;/h2>
&lt;ul>
&lt;li>관리형 컨테이너 오케스트레이션 서비스&lt;/li>
&lt;li>도커 컨테이너를 실행하기 위한 기능 제공&lt;/li>
&lt;li>사용자는 컨테이너 이미지를 정의하고 클러스터에 배포, 관리, 스케일링 할 수 있다.&lt;/li>
&lt;li>컨테이너화된 애플리케이션을 운영하기에 적합한 환경을 제공한다.&lt;/li>
&lt;/ul>
&lt;p>쿠버네티스를 활용해야 하는 상황은 아니어서 주로 ECS 위주의 학습&lt;br>
&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/ecs/index.html" target="_blank" rel="noopener"
>기술 문서&lt;/a>도 한글로 잘 되어 있다!&lt;/p>
&lt;br/>
&lt;h3 id="ecs-서비스-종류">ECS 서비스 종류&lt;/h3>
&lt;ul>
&lt;li>호스트 유형
&lt;ul>
&lt;li>&lt;code>EC2&lt;/code>, &lt;code>Fargate&lt;/code>, &lt;code>External&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>EC2&lt;/code>
&lt;ul>
&lt;li>용량공급자를 통해 EC2 Auto-Scaling Group을 연결&lt;/li>
&lt;li>ECS에서 제공하는 관리형 지표(Capacity Provider Reservation)에 따라 EC2 용량 추가 및 제거 가능&lt;/li>
&lt;li>컨테이너 수의 증가 및 축소에 따라 EC2도 함께 증가 및 축소됨&lt;/li>
&lt;li>EC2 요금만큼 과금
&lt;ul>
&lt;li>EC2 인스턴스는 계속 실행되어 있기 때문에 그만큼의 과금이 필요함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Fargate&lt;/code>
&lt;ul>
&lt;li>서버리스 컨테이너 오케스트레이션&lt;/li>
&lt;li>EC2 처럼 배포하거나 관리할 필요 없음 (서비스만 운영)&lt;/li>
&lt;li>컨테이너 실행에 필요한 인프라 및 리소스 관리를 AWS가 대신 처리함&lt;/li>
&lt;li>시간당 vCPU, Storage 용량 비용 부과&lt;/li>
&lt;li>컨테이너를 쉽게 배포하고 스케일링할 수 있으며, 고가용성과 확장성을 제공함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>External&lt;/code>
&lt;ul>
&lt;li>보안상의 이유로 AWS 인프라가 아닌 호스트에서 서비스가 동작하게 하고 싶을때 사용&lt;/li>
&lt;li>호스트 및 컨테이너 등의 실제 서비스는 물리적으로 AWS 밖에서 동작&lt;/li>
&lt;li>AWS 콘솔에서 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h3 id="ecs-구성">ECS 구성&lt;/h3>
&lt;ul>
&lt;li>ECS Task Definition을 작성하고 그 Task 대로 컨테이너가 운영됨
&lt;ul>
&lt;li>JSon 양식&lt;/li>
&lt;li>컨테이너 이미지, 컨테이너 자원 할당, 포트 구성, 환경변수, 로그 구성 등 설정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(1) AWS ECR 컨테이너 레지스트리에 컨테이너 이미지 push
&lt;ul>
&lt;li>도커 이미지를 private으로 쉽게 관리 가능&lt;/li>
&lt;li>AWS 서비스와 연동이 더 간편함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(2) ECR에서 이미지를 관리하며 ECS Task Definition에 이미지 주입&lt;/li>
&lt;li>(3) ECS 클러스터에 Task Definition 대로 적용
&lt;ul>
&lt;li>특정 이미지를 가지고 어떤 작업을 할 지, 어느 정도의 리소스를 사용할 지 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h3 id="eks와-비교">EKS와 비교&lt;/h3>
&lt;ul>
&lt;li>EKS는 트래픽이 없더라도 비용이 발생&lt;/li>
&lt;li>ECS는 트래픽이 많아진다면 비용이 더 많이 발생할 수 있지만,&lt;br>
토이 프로젝트 용도로는 좋다.
&lt;ul>
&lt;li>트래픽이 없으면 비용이 발생하지 않음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Github Actions에 ecs 무중단 배포 템플릿이 제공됨
&lt;ul>
&lt;li>EKS는 공식 템플릿 없음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h2 id="ecs-실습">ECS 실습&lt;/h2>
&lt;h3 id="ecs-배포-과정">ECS 배포 과정&lt;/h3>
&lt;ul>
&lt;li>&lt;code>ECS 클러스터 생성&lt;/code>
&lt;ul>
&lt;li>템플릿 : 네트워킹 전용&lt;/li>
&lt;li>VPC 설정 확인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>AWS ECR 레포지토리 생성&lt;/code> → 사용할 이미지 push (AWS CLI 사용)
&lt;ul>
&lt;li>&amp;ldquo;푸시 명령 보기&amp;rdquo; 설명 참고&lt;/li>
&lt;li>AWS CLI 환경 설정
&lt;ul>
&lt;li>IAM 계정 생성&lt;/li>
&lt;li>IAM 권한 설정
&lt;ul>
&lt;li>AmazonECS_FullAccess&lt;/li>
&lt;li>AmazonEC2ContainerRegistryFullAccess&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>access key 및 secret access key 생성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이미지 push&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ELB (Elastic Load Balancing)&lt;/code>
&lt;ul>
&lt;li>EC2 → 로드밸런서 → 로드밸런서 생성 → Application Load Balancer&lt;/li>
&lt;li>VPC 지정&lt;/li>
&lt;li>Target Group 임시 생성&lt;/li>
&lt;li>Load Balancer 생성 완료
&lt;ul>
&lt;li>Listener 삭제&lt;/li>
&lt;li>Target Group 삭제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Task Definition 정의&lt;/code>
&lt;ul>
&lt;li>Fargate&lt;/li>
&lt;li>컨테이너 추가
&lt;ul>
&lt;li>ECS → Repository → 이미지 URI 확인&lt;/li>
&lt;li>메모리 제한&lt;/li>
&lt;li>포트 매핑&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Task Definition 생성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Service 생성&lt;/code>
&lt;ul>
&lt;li>Task Definition → Service 생성&lt;/li>
&lt;li>원하는 Task 선택 후 서비스 생성&lt;/li>
&lt;li>VPC 및 서브넷 설정&lt;/li>
&lt;li>보안 그룹
&lt;ul>
&lt;li>Task Definition에서 설정한 컨테이너 포트와 동일하게 설정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>로드 밸런서 추가&lt;/li>
&lt;li>Auto Scaling 설정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h3 id="task와-service">Task와 Service&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Task&lt;/code>
&lt;ul>
&lt;li>하나의 작업&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Service&lt;/code>
&lt;ul>
&lt;li>여러 개의 Task 관리&lt;/li>
&lt;li>다양한 설정 가능 (ELB, Auto Scaling 등)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h3 id="github-actions-자동-배포">Github Actions 자동 배포&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Deploy to Amazon ECS&lt;/code> workflow 제공&lt;/li>
&lt;li>세부 설정 수정
&lt;ul>
&lt;li>Settings → Actions secrets 세팅 (AWS access key 관련)&lt;/li>
&lt;li>도커 이미지 정보 및 Task 정보 세팅&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.wanted.co.kr/events/pre_challenge_be_6" target="_blank" rel="noopener"
>원티드 프리온보딩 4월 백엔드 챌린지&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.aws.amazon.com/ko_kr/ecs/index.html" target="_blank" rel="noopener"
>ECS 기술 문서&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CMAK cluster 생성시 주키퍼 오류(KeeperErrorCode) 해결하기</title><link>/posts/cmak-keeper-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/</link><pubDate>Tue, 09 May 2023 21:00:00 +0900</pubDate><guid>/posts/cmak-keeper-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;p>Kafka 모니터링을 하기 위해 CMAK 환경을 세팅하는중에&lt;br>
&lt;code>KeeperErrorCode = Unimplemented for /kafka-manager/mutex&lt;/code> 에러가 발생했다.&lt;/p>
&lt;p>이 에러를 해결한 과정을 적어본다.&lt;/p>
&lt;blockquote>
&lt;h3 id="개발-환경">개발 환경&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>docker-compose를 통해 zookeeper, kafka, cmak을 로컬 환경에서 실행시켰다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">zookeeper&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;zookeeper&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;wurstmeister/zookeeper&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;2181:2181&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">ZOOKEEPER_CLIENT_PORT=2181&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">ALLOW_ANONYMOUS_LOGIN=yes&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">healthcheck&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">test&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">if netstat -ltn | grep -c &amp;#34;2181&amp;#34;; then echo 0; else echo 1; fi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">5s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">retries&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kafka&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;kafka&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;wurstmeister/kafka&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;9092:9092&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">KAFKA_ADVERTISED_HOST_NAME&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kafka&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">KAFKA_ZOOKEEPER_CONNECT&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zookeeper:2181&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">zookeeper&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">service_healthy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">healthcheck&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">test&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">if netstat -ltn | grep -c &amp;#34;9092&amp;#34;; then echo 0; else echo 1; fi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">10s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">5s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">retries&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kafka-manager-cmak&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;kafka-manager-cmak&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;hlebalbau/kafka-manager&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">on&lt;/span>-&lt;span class="l">failure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;9000:9000&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ZK_HOSTS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zookeeper:2181&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">APPLICATION_SECRET&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;random-secret&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">KM_ARGS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="l">Djava.net.preferIPv4Stack=true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kafka&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">condition&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">service_healthy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;br/>
&lt;h2 id="cmak-에러-keepererrorcode--unimplemented-for-kafka-managermutex">CMAK 에러 &amp;ldquo;KeeperErrorCode = Unimplemented for /kafka-manager/mutex&amp;rdquo;&lt;/h2>
&lt;img src="https://user-images.githubusercontent.com/60170616/236714108-d66052a5-c24a-4c77-9602-34c95365dd2d.png" width="500px"/>
&lt;p>이 에러는 CMAK에서 add cluster시에 필요한 zookeeper의 &lt;code>znode&lt;/code>가 없어서 발생했다.&lt;/p>
&lt;p>&lt;code>znode&lt;/code>는 Zookeeper에서 데이터를 저장하고 관리하기 위한 추상적인 노드이고,&lt;br>
&lt;code>znode&lt;/code>를 생성해주면 이 에러는 해결된다.&lt;/p>
&lt;p>이 에러를 찾아보면서 자세히 알아보았는데,&lt;br>
최신 CMAK은 Apache Curator 2.12.0을 사용하기 때문에&lt;br>
기본적으로 3.5.x 버전의 zookeeper를 지원하고&lt;br>
build에 수정 사항이 있는 3.4.x 버전만 지원한다고 한다.&lt;/p>
&lt;p>내가 사용한 zookeeper의 버전은 3.4.13 버전이었고,&lt;br>
직접 수정 해줘야하는 부분이 있었던 것이다.&lt;/p>
&lt;br/>
&lt;h2 id="znode-생성하기">znode 생성하기&lt;/h2>
&lt;p>생성해줘야 하는 znode는&lt;br>
&lt;code>/kafka-manager/mutex&lt;/code>&lt;br>
&lt;code>/kafka-manager/mutex/locks&lt;/code>&lt;br>
&lt;code>/kafka-manager/mutex/leases&lt;/code>&lt;br>
총 3개이다.&lt;/p>
&lt;p>&lt;code>/kafka-manager&lt;/code>는 cmak 컨테이너를 실행시키면 생성되기 때문에&lt;br>
zookeeper, kafka, cmak 컨테이너를 전부 실행시키고 진행한다.&lt;/p>
&lt;br/>
&lt;h3 id="zkclish-실행">zkCli.sh 실행&lt;/h3>
&lt;p>Zookeeper의 &lt;code>zkCli.sh&lt;/code>을 실행하여 Zookeeper 서버에 연결하고,&lt;br>
Zookeeper 클러스터의 구성요소를 관리할 수 있다.&lt;/p>
&lt;p>도커 데스크탑을 사용하는 경우,&lt;br>
Zookeeper 컨테이너의 터미널 창에서 &lt;code>./bin/zkCli.sh&lt;/code> 명령어를 입력하여 접속하고,&lt;/p>
&lt;p>직접 명령어로 컨테이너에 접근하고 싶다면,&lt;br>
&lt;code>docker-compose exec -t zookeeper bash&lt;/code> 명령어를 입력하여&lt;br>
&amp;lsquo;zookeeper&amp;rsquo; 컨테이너에서 bash shell 환경을 열 수 있다.&lt;br>
그리고 &lt;code>./bin/zkCli.sh&lt;/code> 명령어를 입력하여 Zookeeper 서버에 연결한다.&lt;/p>
&lt;p>아래와 같은 로그가 출력된다. (&amp;hellip;은 생략)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ./bin/zkCli.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connecting to localhost:2181
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome to ZooKeeper!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WATCHER::
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WatchedEvent state:SyncConnected type:None path:null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;br/>
&lt;h3 id="znode-생성">znode 생성&lt;/h3>
&lt;p>&lt;code>zkCli.sh&lt;/code>를 실행했다면 이제 세 가지의 znode를 생성한다.&lt;br>
&lt;code>create /kafka-manager/mutex &amp;quot;&amp;quot;&lt;/code>&lt;br>
&lt;code>create /kafka-manager/mutex/locks &amp;quot;&amp;quot;&lt;/code>&lt;br>
&lt;code>create /kafka-manager/mutex/leases &amp;quot;&amp;quot;&lt;/code>&lt;/p>
&lt;img src="https://github.com/cse0518/MSA_Spring-Eureka/assets/60170616/059eb0c3-5a36-41c6-b7f5-e6b5095b1ed7" width="500px"/>
&lt;p>잘 생성된 것을 확인할 수 있다. (&lt;code>Created&lt;/code>)&lt;/p>
&lt;img src="https://user-images.githubusercontent.com/60170616/236774500-dcaa9687-0de9-459b-99cf-912f773249ac.png" width="350px"/>
&lt;p>이제 Add Cluster가 성공적으로 이뤄진다!&lt;/p>
&lt;br/>
&lt;h3 id="스크립트-작성">스크립트 작성&lt;/h3>
&lt;p>매번 컨테이너를 시작할 때마다&lt;br>
수작업으로 znode를 생성하는 것은 비효율적이기 때문에&lt;br>
자동화할 수 있는 스크립트를 간단히 작성했다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#! /bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;# Add Zookeeper&amp;#39;s ZNodes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose &lt;span class="nb">exec&lt;/span> -t zookeeper bash &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> ./bin/zkCli.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> create /kafka-manager/mutex &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> create /kafka-manager/mutex/locks &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> create /kafka-manager/mutex/leases &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> quit
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">exit
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>docker-compose exec&lt;/code> 명령어를 sh 파일에서 실행하면&lt;br>
일반적으로 동작하지 않는다.&lt;/p>
&lt;p>&lt;code>docker-compose exec&lt;/code>는 명령어를 특정 컨테이너에서 실행하기 위해 사용하는 커맨드이며,&lt;br>
이 명령어는 &lt;code>docker-compose.yml&lt;/code> 파일에 정의된 컨테이너들만 접근할 수 있다.&lt;/p>
&lt;p>따라서, &lt;code>docker-compose exec&lt;/code> 명령어를 실행하려면&lt;br>
일반적으로 터미널에서 수동으로 입력해야 하고,&lt;br>
스크립트에서 자동으로 &lt;code>docker-compose exec&lt;/code> 명령어를 실행하고 싶다면,&lt;br>
위와 같이 &lt;code>EOF&lt;/code>를 명시해줘야 한다.&lt;/p>
&lt;p>위 스크립트에서 &amp;lsquo;quit&amp;rsquo;는 &lt;code>zkCli.sh&lt;/code>를 종료하는 명령어이고,&lt;br>
&amp;rsquo;exit&amp;rsquo;는 &lt;code>docker-compose exec&lt;/code> 명령어로 실행한&lt;br>
zookeeper 컨테이너의 bash shell을 종료하는 명령어이다.&lt;/p>
&lt;p>이제 스크립트를 실행하면 znode 세팅을 빠르게 끝낼 수 있다!&lt;/p>
&lt;br/>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/cse0518/MSA_Spring-Eureka/issues/1" target="_blank" rel="noopener"
>내가 작성한 이슈&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/yahoo/CMAK/issues/748#issuecomment-598734547" target="_blank" rel="noopener"
>https://github.com/yahoo/CMAK/issues/748#issuecomment-598734547&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://lightrun.com/answers/yahoo-cmak-failed-to-add-cluster-on-3001" target="_blank" rel="noopener"
>https://lightrun.com/answers/yahoo-cmak-failed-to-add-cluster-on-3001&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>AWS 서비스 파악하기 - IAM, EC2, EBS, ELB, RDS</title><link>/posts/aws-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0-1/</link><pubDate>Mon, 17 Apr 2023 22:00:00 +0900</pubDate><guid>/posts/aws-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0-1/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;p>AWS의 다양한 리소스를 파악해보고자&lt;br>
&lt;code>업무에 바로 쓰는 AWS 입문&lt;/code> 책을 읽기 시작했다.&lt;br>
그 내용을 하나씩 정리해보고자 한다.&lt;/p>
&lt;br/>
&lt;h2 id="iam-identity-and-access-management">IAM (Identity and Access Management)&lt;/h2>
&lt;p>IAM은 &lt;strong>어떤 리소스나 서비스에 대한 접근 권한 및 레벨 관리 기능&lt;/strong>을 제공한다.&lt;/p>
&lt;p>root 유저는 모든 리소스를 제약없이 사용할 수 있고, 새로운 유저를 만들 수 있다.&lt;br>
유저는 access key와 secret key를 가지고 있다.&lt;br>
유저를 생성할 때 access key와 secret key를 확인할 수 있고,&lt;br>
secret key는 나중에 다시 확인할 수 없다고 한다.&lt;br>
따로 보관하고 유출되지 않도록 주의한다.&lt;/p>
&lt;p>쉽게 말해서&lt;br>
access key는 아이디, secret key는 비밀번호로 생각하면 된다.&lt;/p>
&lt;br/>
&lt;h3 id="관리-요소">관리 요소&lt;/h3>
&lt;p>IAM은 유저, 그룹, 역할, 정책을 관리한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>유저&lt;/code>
&lt;ul>
&lt;li>유저는 access key와 secret key를 가지고 AWS 리소스를 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>그룹&lt;/code>
&lt;ul>
&lt;li>그룹은 하나 or 여러 유저를 포함할 수 있다.&lt;/li>
&lt;li>그룹 전체에 접근 권한을 설정할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>정책(Policy)&lt;/code>
&lt;ul>
&lt;li>정책을 생성하여 최소 권한 정책을 펼칠 수 있고, 유저 및 그룹에 적용시킬 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>역할(Role)&lt;/code>
&lt;ul>
&lt;li>역할은 하나 or 다수의 정책을 포함할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h3 id="계정-타입">계정 타입&lt;/h3>
&lt;p>유저 생성 시 계정의 타입을 설정한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>Programmatic Access&lt;/code>
&lt;ul>
&lt;li>access key를 발급해서 AWS API를 호출하는 방식으로 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>AWS Management Console Access&lt;/code>
&lt;ul>
&lt;li>AWS 웹 콘솔 사용&lt;/li>
&lt;li>User name, Password를 입력해 로그인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h2 id="ec2-elastic-compute-cloud">EC2 (Elastic Compute Cloud)&lt;/h2>
&lt;p>EC2는 &lt;strong>클라우드 공간에 크기가 유연하게 변경되는 가상 서버 기능&lt;/strong>을 제공한다.&lt;/p>
&lt;br/>
&lt;h3 id="비용-지불-방식">비용 지불 방식&lt;/h3>
&lt;ul>
&lt;li>&lt;code>On-Demand&lt;/code>
&lt;ul>
&lt;li>시간당 정해진 금액 지불&lt;/li>
&lt;li>짧은 시간 동안 인스턴스를 임대하는 방식 (ex. 서버 테스트 등)&lt;/li>
&lt;li>인스턴스의 크기를 &lt;strong>늘리거나 줄일 수 있음 (O)&lt;/strong>&lt;/li>
&lt;li>사용한만큼 후불 결제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Reserved&lt;/code>
&lt;ul>
&lt;li>특정 기간만큼 임대&lt;/li>
&lt;li>인스턴스의 크기를 &lt;strong>늘리거나 줄일 수 없음 (X)&lt;/strong>&lt;/li>
&lt;li>선불 결제, &lt;strong>저렴한 가격&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Spot&lt;/code>
&lt;ul>
&lt;li>인스턴스 가격을 입찰하여 구매하는 방식&lt;/li>
&lt;li>시장 경제에 따라 인스턴스 비용이 변화함.&lt;br>
입찰가에 내놓은 금액(최소, 최대)과 맞으면 인스턴스 실행, 그렇지 않으면 꺼진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h3 id="ebs-elastic-block-store">EBS (Elastic Block Store)&lt;/h3>
&lt;p>파일 및 오브젝트를 보관할 수 있는 스토리지 볼륨(파일 시스템)을 만들어준다.&lt;br>
EBS는 EC2 인스턴스에 부착되어 사용된다.&lt;br>
EC2 인스턴스가 종료되어도 EBS안에 있는 데이터는 유지된다.&lt;/p>
&lt;p>&lt;strong>EBS 타입&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>SSD (Solid State Driver)
&lt;ul>
&lt;li>입출력이 많을 때 유리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HDD (Hard Disk Driver)
&lt;ul>
&lt;li>처리량이 많을 때 유리 (ex. 방대한 스트리밍 워크로드 등)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h3 id="elb-elastic-load-balancer">ELB (Elastic Load Balancer)&lt;/h3>
&lt;p>EC2는 ELB를 사용하여 서버 트래픽을 원활하게 해준다.&lt;/p>
&lt;p>&lt;strong>ELB 타입&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>ALB (Application Load Balancer)&lt;/code>
&lt;ul>
&lt;li>OSI Application(7th) Layer에서 작동&lt;/li>
&lt;li>HTTP, HTTPS와 같은 네트워크 트래픽을 제어(라우팅)할 때 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>NLB (Network Load Balancer)&lt;/code>
&lt;ul>
&lt;li>OSI Transport(4th) Layer에서 작동&lt;/li>
&lt;li>TCP/IP 모델 포함. TCP 트래픽을 관리(라우팅).&lt;/li>
&lt;li>대량 요청에 적합 (ex. production 환경)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>CLB (Classic Load Balancer)&lt;/code>
&lt;ul>
&lt;li>ALB, NLB보다 성능이 뒤처지는 레거시&lt;/li>
&lt;li>네트워크 호스트가 누구인지 알 수 없는 문제.&lt;br>
믿어도 되는 호스트인지 판단 불가능.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>흔히 일어날 수 있는 ELB 에러&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>504 Gateway Time-out 에러
&lt;ul>
&lt;li>로드밸런서 최대 접속 시간 제한 (default 60초)&lt;/li>
&lt;li>애플리케이션 규모가 크다면 시간 제한을 변경&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>X-Forwarded-For 헤더&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>HTTP/HTTPS 요청을 로드 밸런서에서 받을 때 &lt;code>출처&lt;/code>에 대한 정보를 담고 있다.&lt;/li>
&lt;li>&lt;code>public IP address&lt;/code>는 DNS 요청에 의해 ELB에서 &lt;code>private IP address&lt;/code>로 인식.&lt;br>
→ &lt;code>private IP address&lt;/code>가 EC2 인스턴스로 보내지는데, public IP address를 확인 불가능.&lt;br>
→ 그래서 X-Forwarded-For 헤더에 &lt;code>public IP address&lt;/code>를 담아서 전달.&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h2 id="rds-relational-database-service">RDS (Relational Database Service)&lt;/h2>
&lt;p>관계형 데이터베이스 서비스 생성&lt;/p>
&lt;br/>
&lt;h3 id="자동-백업-automated-backup">자동 백업 (Automated Backup)&lt;/h3>
&lt;p>RDS에서 데이터베이스를 생성하면 자동 백업 기능이 default로 활성화 된다.&lt;br>
1~35일의 보유 기간 내에 특정 시간으로 데이터베이스 상태를 복원할 수 있다.&lt;br>
7~35일로 설정 가능하다.&lt;/p>
&lt;p>자동 백업 기능은 스냅샷과 트랜잭션 로그를 생성 후 S3 버킷에 저장.&lt;br>
복구 희망 날짜의 스냅샷과 트랜잭션 로그를 참조하여 복원.&lt;/p>
&lt;p>&lt;strong>자동 백업 단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>백업 정보를 S3에 업로드하는 동안 입출력 지연 발생&lt;/li>
&lt;li>원본 RDS 인스턴스를 삭제하면 백업 정보도 모두 사라짐&lt;/li>
&lt;/ul>
&lt;br/>
&lt;h3 id="다중-가용-영역-multi-availability-zone">다중 가용 영역 (Multi Availability Zone)&lt;/h3>
&lt;p>DB에서 어떤 이벤트가 발생할 때,&lt;br>
기존 DB 인스턴스를 업데이트함과 동시에 가용 영역에 복제본이 만들어 진다.&lt;/p>
&lt;p>가용 영역에 복제본 생성 실패 시,&lt;br>
RDS가 자동 감지하여 다른 안정적인 가용 영역에 복제본 다시 생성한다.&lt;/p>
&lt;p>만약 기존 인스턴스에 문제가 생기면 복제본으로 롤백한다.&lt;br>
이를 재해 복구(Disaster Recovery)라고 한다.&lt;/p>
&lt;br/>
&lt;h3 id="읽기-전용-복사본-read-replica">읽기 전용 복사본 (Read Replica)&lt;/h3>
&lt;p>데이터를 읽기 위한 데이터베이스 복제본.&lt;br>
읽기 작업만 수행 가능.&lt;/p>
&lt;p>읽기 전용 DB를 복제하여 트래픽 분산.&lt;br>
최대 5개까지 복제 가능.&lt;/p>
&lt;br/>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.yes24.com/Product/Goods/116626210" target="_blank" rel="noopener"
>업무에 바로 쓰는 AWS 입문 (김성민 / 2023)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>23가지 디자인 패턴</title><link>/posts/23%EA%B0%80%EC%A7%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/</link><pubDate>Sat, 07 Aug 2021 12:30:00 +0900</pubDate><guid>/posts/23%EA%B0%80%EC%A7%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/</guid><description>&lt;h2 id="디자인-패턴이란">디자인 패턴이란?&lt;/h2>
&lt;p>소프트웨어를 설계하는 원칙을 최종적으로 정의한 것이 SOLID 원칙이었고, 이 원칙을 지키며 설계를 해보니 공통적인 23가지의 패턴이 있었다. 이렇게 23가지의 디자인 패턴이 등장하게 되었다.&lt;/p>
&lt;p>GoF(Gang of Four) : 디자인 패턴을 구체화하고 체계화한 4인&lt;br>
에리히 감마(Erich Gamma), 리차드 헬름(Richard Helm), 랄프 존슨(Ralph Johnson), 존 블리시디스(John Vissides)&lt;/p>
&lt;p>디자인 패턴을 잘 사용하면 효율성과 재사용성을 높일 수 있으며, 설계 자료를 유형별로 분류하면 개발 기간을 둘이고 유지보수도 매우 쉬워질 수 있다. 디자인 패턴은 알고리즘처럼 프로그램 코드로 변환하여 바로 사용할 수 있는 것은 아니지만 유사한 상황에서 구조적인 문제를 해결할 수 있는 방안을 제시해준다.&lt;/p>
&lt;br>
&lt;h2 id="디자인-패턴의-분류">디자인 패턴의 분류&lt;/h2>
&lt;p>디자인 패턴은 생성(Creational), 구조(Structural), 행위(Behavioral) 패턴 3가지로 분류된다.&lt;/p>
&lt;p>&lt;img src="/https:/user-images.githubusercontent.com/60170616/128638669-2934be85-0e09-4aee-8c25-be96c7d25ca1.png"
loading="lazy"
alt="디자인 패턴 분류"
>&lt;/p>
&lt;br>
&lt;h2 id="생성-패턴">생성 패턴&lt;/h2>
&lt;p>&lt;strong>Abstract Factory Pattern (추상 팩토리 패턴)&lt;/strong>&lt;/p>
&lt;p>구체적인 클래스를 지정하지 않고 관련성을 갖는 객체들의 집합을 생성하거나 서로 독립적인 객체들의 집합을 생성할 수 있는 인터페이스를 제공하는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Builder Pattern&lt;/strong>&lt;/p>
&lt;p>복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Factory Method Pattern&lt;/strong>&lt;/p>
&lt;p>객체를 생성하는 인터페이스는 미리 정의하되, 인스턴스를 만들 클래스의 결정은 서브클래스 쪽에서 내리는 패턴이다.
팩토리 메소드 패턴에서는 클래스의 인스턴스를 만드는 시점을 서브클래스로 미룬다.&lt;/p>
&lt;p>&lt;strong>Prototype Pattern&lt;/strong>&lt;/p>
&lt;p>생성할 객체의 종류를 명세화하는 데에 원형이 되는 예시물을 이용하고, 그 원형을 복사함으로써 새로운 객체를 생성하는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Singleton Pattern&lt;/strong>&lt;/p>
&lt;p>어떤 클래스의 인스턴스는 오직 하나임을 보장하며, 이 인스턴스에 접근할 수 있는 전역적인 접촉점을 제공하는 패턴이다.&lt;/p>
&lt;br>
&lt;h2 id="구조-패턴">구조 패턴&lt;/h2>
&lt;p>&lt;strong>Adapter Pattern&lt;/strong>&lt;/p>
&lt;p>클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스로 변환하는 패턴으로, 호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 함께 작동하도록 한다.&lt;/p>
&lt;p>&lt;strong>Bridge Pattern&lt;/strong>&lt;/p>
&lt;p>구현부에서 추상층을 분리하여 각자 독립적으로 변형할 수 있게 하는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Composite Pattern&lt;/strong>&lt;/p>
&lt;p>객체들의 관계를 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴으로, 사용자가 단일 객체와 복합 객체 모두 동일하게 다루도록 한다.&lt;/p>
&lt;p>&lt;strong>Decorator Pattern&lt;/strong>&lt;/p>
&lt;p>주어진 상황 및 용도에 따라 어떤 객체에 책임을 덧붙이는 패턴으로, 기능 확장이 필요할 때 서브클래싱 대신 쓸 수 있는 유연한 대안이 될 수 있다.&lt;/p>
&lt;p>&lt;strong>Facade Pattern&lt;/strong>&lt;/p>
&lt;p>서브시스템에 있는 인터페이스 집합에 대해서 하나의 통합된 인터페이스를 제공하는 패턴으로, 서브시스템을 좀더 사용하기 편하게 만드는 상위 수준의 인터페이스를 정의한다.&lt;/p>
&lt;p>&lt;strong>Flyweight Pattern&lt;/strong>&lt;/p>
&lt;p>크기가 작은객체가 여러개 있을 때, 공유를 통해 이들을 효율적으로 지원하는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Proxy Pattern&lt;/strong>&lt;/p>
&lt;p>어떤 다른 객체로 접근하는 것을 통제하기 위해서 그 객체의 대리자(surrogate), 또는 자리채움자(placeholder)를 제공하는 패턴이다.&lt;/p>
&lt;br>
&lt;h2 id="행위-패턴">행위 패턴&lt;/h2>
&lt;p>&lt;strong>Chain of Responsibility Pattern (책임 연쇄 패턴)&lt;/strong>&lt;/p>
&lt;p>요청을 처리할 수 있는 기회를 하나 이상의 객체에게 부여하여 요청을 보내는 객체와 그 요청을 받는 객체 사이의 결합을 피하는 패턴이다.&lt;br>
요청을 받을 수 있는 객체를 연쇄적으로 묶고, 실제 요청을 처리한 객체를 만날 때까지 객체 고리를 따라서 요청을 전달한다.&lt;/p>
&lt;p>&lt;strong>Command Pattern&lt;/strong>&lt;/p>
&lt;p>요청을 객체의 형태로 캡슐화하여, 서로 요청이 다른 사용자의 매개변수화, 요청 저장 또는 로깅, 그리고 연산의 취소를 지원하게 만드는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Interpreter Pattern&lt;/strong>&lt;/p>
&lt;p>주어진 언어에 대해, 그 언어의 문법을 위한 표현 수단을 정의하고, 이와 아울러 그 표현 수단을 사용하여 해당 언어로 작성된 문장을 해석하는 해석기를 정의하는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Iterator Pattern&lt;/strong>&lt;/p>
&lt;p>내부 표현부를 노출하지 않고 어떤 객체 집합에 속한 원소들을 순차적으로 접근할 수 있는 방법을 제공하는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Mediator Pattern&lt;/strong>&lt;/p>
&lt;p>한 집합에 속해있는 객체들의 상호작용을 캡슐화하는 객체를 정의하는 패턴이다.&lt;br>
객체들이 직접 서로를 참조하지 않도록 함으로써 객체들 사이의 소결합(loose coupling)을 촉진시키며, 개발자가 객체들의 상호작용을 독립적으로 다양화시킬 수 있게 만든다.&lt;/p>
&lt;p>&lt;strong>Memento Pattern&lt;/strong>&lt;/p>
&lt;p>캡슐화를 위배하지 않는 채 어떤 객체의 내부 상태를 잡아내고 신체화시켜, 이후에 해당 객체가 그 상태로 다시 되돌아올 수 있도록 하는 패턴이다.&lt;/p>
&lt;p>&lt;strong>Observer Pattern&lt;/strong>&lt;/p>
&lt;p>객체 사이에 일 대 다의 의존 관계를 정의해 두어, 어떤 객체의 상태가 변할 때 그 객체에 의존성을 가진 다른 객체들이 그 변화를 통지받고 자동으로 갱신될 수 있게 만드는 패턴이다.&lt;/p>
&lt;p>&lt;strong>State Pattern&lt;/strong>&lt;/p>
&lt;p>객체의 내부 상태에 따라 스스로 행동을 변경할 수 있게끔 허가하는 패턴으로, 이렇게 하면 객체는 마치 자신의 클래스를 바꾸는 것 처럼 보인다.&lt;/p>
&lt;p>&lt;strong>Strategy Pattern&lt;/strong>&lt;/p>
&lt;p>동일 계열의 알고리즘군을 정의하고, 각각의 알고리즘을 캡슐화하며, 이들을 상호교환이 가능하도 록 만드는 패턴이다.&lt;br>
알고리즘을 사용하는 사용자와 상관없이 독립적으로 알고리즘을 다양하게 변경할 수 있게 한다.&lt;/p>
&lt;p>&lt;strong>Template Method Pattern&lt;/strong>&lt;/p>
&lt;p>객체의 연산에는 알고리즘의 뼈대만을 정의하고 각 단계에서 수행할 구체적 처리는 서브클래스 쪽으로 미루는 패턴이다.&lt;br>
알고리즘의 구조 자체는 그대로 놔둔 채 알고리즘 각 단계의 처리를 서브클래스에서 재정의할 수 있게 한다.&lt;/p>
&lt;p>&lt;strong>Visitor Pattern&lt;/strong>&lt;/p>
&lt;p>객체 구조를 이루는 원소에 대해 수행할 연산을 표현하는 패턴으로, 연산을 적용할 원소의 클래스를 변경하지 않고도 새로운 연산을 정의할 수 있게 한다.&lt;/p>
&lt;br>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://gmlwjd9405.github.io/2018/07/06/design-pattern.html" target="_blank" rel="noopener noreferrer">[Design Pattern] 디자인 패턴 종류&lt;/a>&lt;br>
&lt;a href="https://velog.io/@undefined/gof-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4" target="_blank" rel="noopener noreferrer">GOF 디자인 패턴 23가지&lt;/a>&lt;br>
&lt;a href="https://youtu.be/lJES5TQTTWE" target="_blank" rel="noopener noreferrer">객체지향 디자인패턴 1&lt;/a>&lt;br>
&lt;a href="https://youtu.be/q3_WXP9pPUQ" target="_blank" rel="noopener noreferrer">객체지향 디자인패턴 2&lt;/a>&lt;/p></description></item><item><title>Object Class</title><link>/posts/object-class/</link><pubDate>Wed, 04 Aug 2021 22:40:00 +0900</pubDate><guid>/posts/object-class/</guid><description>&lt;p>java.lang 패키지에는 Object 클래스가 포함되어 있다. 그리고 이 Object 클래스는 모든 Java 클래스의 최고 상위 클래스로 모든 클래스는 Object 클래스를 상속받는다.&lt;/p>
&lt;p>따라서 Java의 모든 클래스들은 Object 클래스의 모든 메소드를 바로 사용할 수 있고, 이것을 잘 익혀놓으면 다양하게 활용할 수 있다.&lt;/p>
&lt;p>총 11개의 메소드로 구성되어 있고, 주로 toString(), equals(), hashCode(), clone()을 override 해서 사용한다.&lt;br>
메소드들을 좀더 자세히 알아보겠다.&lt;/p>
&lt;br>
&lt;h2 id="object-class의-11가지-method">Object Class의 11가지 method&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Method&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>protected Object clone()&lt;/code>&lt;/td>
&lt;td>해당 객체의 복제본을 생성하여 반환함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>boolean equals(Object obj)&lt;/code>&lt;/td>
&lt;td>해당 객체와 전달받은 객체가 같은지 여부를 반환함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>protected void finalize()&lt;/code>&lt;/td>
&lt;td>해당 객체를 더는 아무도 참조하지 않아 가비지 컬렉터가 객체의 리소스를 정리하기 위해 호출함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Class&amp;lt;T&amp;gt; getClass()&lt;/code>&lt;/td>
&lt;td>해당 객체의 클래스 타입을 반환함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>int hashCode()&lt;/code>&lt;/td>
&lt;td>해당 객체의 해시 코드값을 반환함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>void notify()&lt;/code>&lt;/td>
&lt;td>해당 객체의 대기(wait)하고 있는 하나의 스레드를 다시 실행할 때 호출함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>void notifyAll()&lt;/code>&lt;/td>
&lt;td>해당 객체의 대기(wait)하고 있는 모든 스레드를 다시 실행할 때 호출함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>String toString()&lt;/code>&lt;/td>
&lt;td>해당 객체의 정보를 문자열로 반환함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>void wait()&lt;/code>&lt;/td>
&lt;td>해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행할 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>void wait(long timeout)&lt;/code>&lt;/td>
&lt;td>해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행하거나 전달받은 시간이 지날 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>void wait(long timeout, int nanos)&lt;/code>&lt;/td>
&lt;td>해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행하거나 전달받은 시간이 지나거나 다른 스레드가 현재 스레드를 인터럽트 할 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;br>
&lt;h2 id="tostring">toString()&lt;/h2>
&lt;p>toString() method는 해당 인스턴스의 정보를 문자열로 반환한다.&lt;br>
클래스 이름과 구분자 &amp;lsquo;@&amp;rsquo;, 그 뒤에 16진수 해시 코드가 반환된다.&lt;/p>
&lt;h3 id="tostring의-원형">toString()의 원형&lt;/h3>
&lt;p>&lt;code>getClass().getName()&lt;/code> + &lt;code>'@'&lt;/code> + &lt;code>Integer.toHexString(hashCode())&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">TestMethod&lt;/span> &lt;span class="o">{...}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TestMethod&lt;/span> &lt;span class="n">test01&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TestMethod&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TestMethod&lt;/span> &lt;span class="n">test02&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TestMethod&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">test01&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">test02&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">TestMethod&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="n">c7b84de&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TestMethod&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="mf">3f&lt;/span>&lt;span class="n">ee733d&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;br>
&lt;h3 id="string">String&lt;/h3>
&lt;p>String 객체를 출력하면 String 객체가 저장하고 있는 문자열이 출력된다.&lt;br>
jdk의 String 클래스는 toString()을 override하고 있기 때문이다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">test&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그렇다면 이 toString()을 어떤 경우에 override해서 사용할까?&lt;br>
예를 들어 보겠다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Song&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">singer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Song&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">singer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">title&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">singer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Song{title=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">title&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;, singer=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">singer&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;}&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Song&lt;/span> &lt;span class="n">song&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Song&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;노래 제목&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;가수&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">song&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Song&lt;/span>&lt;span class="o">{&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">&amp;#39;노래&lt;/span> &lt;span class="err">제목&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">singer&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">&amp;#39;가수&amp;#39;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이렇게 객체의 정보를 문자열 형태로 표현하고자 할 때,&lt;br>
공통적으로 출력되어야 하는 형태가 있는 경우,&lt;br>
toString()을 override해서 return 값을 바꿔줄 수 있다.&lt;/p>
&lt;br/>
&lt;h2 id="equals">equals()&lt;/h2>
&lt;p>equals() method는 두 객체가 같은 객체인지 비교할 때 사용한다.&lt;br>
여기서 &lt;strong>동등성&lt;/strong>과 &lt;strong>동일성&lt;/strong>에 대해 생각해볼 필요가 있다.&lt;/p>
&lt;p>주로 primitive type의 자료형이 같은 지를 비교할 때 &lt;strong>&amp;rsquo;==&amp;rsquo;&lt;/strong> 연산자를 사용하는데, 이는 두 object가 같은 정보를 담고 있는지를 비교한다. 즉, 동등한지를 비교한다.&lt;/p>
&lt;p>그리고 두 객체가 같은 지를 비교할 때는 equals() method를 사용하는데, 이는 두 object가 완전히 같은, 동일한 object인지 비교하는 것이다.&lt;/p>
&lt;p>두 객체가 같은 주소값을 가지는 같은 객체라는 것이 동일하다고 표현된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">User&lt;/span> &lt;span class="n">user1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;최승은&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">User&lt;/span> &lt;span class="n">user2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;최승은&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 두 개의 다른 객체가 같은 값을 가지고 있다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user2&lt;/span>&lt;span class="o">));&lt;/span> &lt;span class="c1">// 서로 다른 객체이기 때문에 false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">user1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">user2&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 두 변수가 같은 주소를 가리키게 된다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user2&lt;/span>&lt;span class="o">));&lt;/span> &lt;span class="c1">// 같은 주소값의 같은 객체이기 때문에 true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="equals-기본-형태">equals() 기본 형태&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>equals의 기본 형태는 이렇다. object가 동일한지를 비교하는 것이다.&lt;br>
그렇다면 equals()는 어떤 경우에 override해서 사용할까?&lt;br>
예를 들어 보겠다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getId&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">User&lt;/span> &lt;span class="n">user1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;최승은&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">User&lt;/span> &lt;span class="n">user2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;최승은&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user2&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위의 예시처럼 두 객체가 같은 해시코드 값을 갖는지 비교하는 내용으로 override를 하여 사용한다.&lt;/p>
&lt;br/>
&lt;h2 id="hashcode">hashCode()&lt;/h2>
&lt;p>해시코드란 JVM이 인스턴스를 생성할 때 메모리 주소를 변환해서 부여하는 코드이다.&lt;br>
실제 메모리 주소값과는 별개이며, 실제 메모리 주소는 System 클래스의 identityHashCode()로 확인할 수 있다.&lt;/p>
&lt;p>자바에서의 동일성은 equals()의 반환값이 true, hashCode() 반환값이 동일함을 의미한다.&lt;br>
그래서 일반적으로 equals()와 hashCode()는 함께 override 한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getId&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashCode&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">getId&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">User&lt;/span> &lt;span class="n">user1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;최승은&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">User&lt;/span> &lt;span class="n">user2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;최승은&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user1.equals(user2): &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">user1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user2&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user1.hashCode(): &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">user1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user2.hashCode(): &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">user2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;System.identityHashCode(user1): &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">identityHashCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user1&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;System.identityHashCode(user2): &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">identityHashCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user2&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">user1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user2&lt;/span>&lt;span class="o">):&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">user1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">():&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">user2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">():&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">identityHashCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user1&lt;/span>&lt;span class="o">):&lt;/span> &lt;span class="mi">1804094807&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">identityHashCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user2&lt;/span>&lt;span class="o">):&lt;/span> &lt;span class="mi">951007336&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위의 예시는 id를 해시코드 값으로 반환하여 출력하게 된다.&lt;br>
이렇게 두 개의 서로 다른 메모리에 위치한 객체가 동일성을 갖기 위해 override를 하게 된다.&lt;/p>
&lt;h3 id="wrapper-class">Wrapper class&lt;/h3>
&lt;p>Integer 클래스도 Object 클래스의 hashCode()를 override하고 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Integer&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Integer&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a.hashCode(): &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;b.hashCode(): &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">():&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">():&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위 코드를 보면 a 객체와 b 객체는 같은 값을 갖지만 따로 생성된 다른 객체이다. 따라서 &amp;lsquo;==&amp;rsquo; 연산자를 사용하여 비교하면 false가 나온다.&lt;/p>
&lt;p>하지만 equals() 메소드를 사용하여 비교하면 true가 나온다. 그 이유는 같은 hashcode 주소값을 갖기 때문이다.&lt;/p>
&lt;p>java.lang에 있는 integer 클래스를 보면 hashCode() 메소드가 override 되어있는것을 확인할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashCode&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;br>
&lt;h2 id="clone">clone()&lt;/h2>
&lt;p>clone() method는 객체를 복제할 때 사용하며, private 필드도 복제할 수 있기 때문에 정보은닉에 위배될 수 있다.&lt;/p>
&lt;p>따라서 인터페이스가 명시돼있는 클래스만 clone()을 통해 객체를 복제할 수 있다.&lt;/p>
&lt;br>
&lt;h2 id="finalize">finalize()&lt;/h2>
&lt;p>finalize() method는 직접 호출하는 메소드가 아니라 객체가 힙 메모리에서 해제될 때 가비지콜렉터가 호출하는 메소드이다.&lt;/p>
&lt;p>이 메소드가 override 되어있으면 가비지콜렉터가 이 메소드를 호출하여 실행한다.&lt;br>
즉, finalize()에는 객체가 해제될 때 리소스 해제, 소켓 close 등의 필요한 것들을 구현해주면 된다.&lt;/p>
&lt;br/>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener noreferrer">오라클 api 공식 문서&lt;/a>&lt;br>
&lt;a href="http://tcpschool.com/java/java_api_object" target="_blank" rel="noopener noreferrer">Object 클래스&lt;/a>&lt;br>
&lt;a href="https://atoz-develop.tistory.com/entry/%EC%9E%90%EB%B0%94-Object-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EB%A6%AC-toString-equals-hashCode-clone">자바 Object 클래스 정리 - toString(), equals(), hashCode(), clone()&lt;/a>&lt;/p></description></item><item><title>StringBuffer와 StringBuilder</title><link>/posts/stringbuffer-stringbuilder/</link><pubDate>Tue, 03 Aug 2021 23:00:00 +0900</pubDate><guid>/posts/stringbuffer-stringbuilder/</guid><description>&lt;p>Java에는 기본적으로 제공하는 api들이 있다. 이에 대한 내용은 &lt;a class="link" href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener"
>오라클 공식 문서&lt;/a>에 자세히 기재되어 있다.&lt;br>
java의 기본 패키지들은 따로 import 하지 않아도 기본적으로 사용할 수 있기 떄문에 이를 잘 활용하는 것이 필요하다.&lt;/p>
&lt;p>본 포스팅에서는 &lt;strong>String&lt;/strong>, &lt;strong>StringBuffer&lt;/strong>, &lt;strong>StringBuilder&lt;/strong>에 대해 알아보려고 한다.&lt;/p>
&lt;img src="https://user-images.githubusercontent.com/60170616/128120351-f2a398c5-34ad-4814-a1f8-63a31f99279d.png" alt="java.lang.StringBuffer"/>
&lt;ul>
&lt;li>&lt;strong>java.lang&lt;/strong> package에 포함되어 있는 &lt;strong>String&lt;/strong>, &lt;strong>StringBuffer&lt;/strong>, &lt;strong>StringBuilder&lt;/strong> classes&lt;/li>
&lt;/ul>
&lt;h2 id="string">String&lt;/h2>
&lt;img src="https://user-images.githubusercontent.com/60170616/128121581-ff4bb10c-d656-4c86-85cb-d0a277a137f9.png" alt="java.lang.String"/>
&lt;p>먼저 &lt;strong>String&lt;/strong>에 대한 문서 내용을 확인해보면 Serializable, Comparable, CharSequence 인터페이스가 상속되어 있고, public final class로 되어 있다. serialize가 가능하며 문자열이고 비교가능한 값이라는 것을 알 수 있다. 또한 final class이기 때문에 String class를 상속받을 수는 없다.&lt;/p>
&lt;h3 id="constant-pool">Constant Pool&lt;/h3>
&lt;p>Java에서는 String을 특별하게 취급한다. Java heap 영역 안에 String constant pool이 존재하는데, String을 literal로 생성하면 Heap 영역 안에 있는 constant pool에 저장되어 재사용된다.&lt;/p>
&lt;p>그림으로 나타내면 아래와 같다.&lt;/p>
&lt;img src="https://user-images.githubusercontent.com/60170616/130737651-aef4242e-cd72-4930-baae-6cc8f04f71b1.png" alt="java heap 구조"/>
&lt;p>String 객체를 생성하여 저장하면 중복되는 값도 계속 heap 영역에 저장되기 때문에 메모리 낭비가 생긴다. 따라서 중복되는 문자열은 literal로 생성하여 constant pool에 저장되게 하는게 유리하다. constant pool에 저장된 문자열은 같은 주소값을 참조한다는 점도 참고하여 코드 설계에 적용하는것이 좋다.&lt;/p>
&lt;p>추가로 String 객체를 생성하여 intern() 메소드를 호출하면 constant pool에 접근하여 이미 있는 문자열을 참조할 수 있다.&lt;/p>
&lt;img src="https://user-images.githubusercontent.com/60170616/128123912-f44d001b-7f58-44fd-9ff0-75aad35843b6.png" alt="StringBuilder description"/>
&lt;p>그리고 문자열을 더할때는 &lt;strong>StringBuffer&lt;/strong> 또는 &lt;strong>StringBuilder&lt;/strong>를 사용하여 구현한다고 한다.&lt;br>
왜 단순히 문자열에 계속 문자를 더하지 않고, &lt;strong>StringBuffer&lt;/strong>와 &lt;strong>StringBuilder&lt;/strong>을 이용하는 것일까?&lt;br>
좀 더 자세히 알아보자.&lt;/p>
&lt;h2 id="stringbuffer">StringBuffer&lt;/h2>
&lt;p>&lt;strong>StringBuffer&lt;/strong>는 문자열을 추가하거나 변경 할 때 주로 사용하는 자료형이다.&lt;br>
실제로 어떻게 다른지 확인해보자.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 문자열 test1의 값과 주소값 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">test1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;TEST 1&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;test1: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;test1 reference: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 문자열에 한 글자씩 더하여 주소값 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test1&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;test1: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;test1 reference: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">test1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// StringBuffer 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">StringBuffer&lt;/span> &lt;span class="n">sb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuffer&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// StringBuffer에 문자를 append 하고 주소값 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sb&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb reference: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">sb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">test1:&lt;/span> &lt;span class="n">TEST&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test1&lt;/span> &lt;span class="n">reference&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1823841245&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">test1:&lt;/span> &lt;span class="n">TEST&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test1&lt;/span> &lt;span class="n">reference&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">704503699&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">test1:&lt;/span> &lt;span class="n">TEST&lt;/span> &lt;span class="mi">101&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test1&lt;/span> &lt;span class="n">reference&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">364778140&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">test1:&lt;/span> &lt;span class="n">TEST&lt;/span> &lt;span class="mi">1012&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test1&lt;/span> &lt;span class="n">reference&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1576779598&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">sb:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sb&lt;/span> &lt;span class="n">reference&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">471910020&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">sb:&lt;/span> &lt;span class="mo">01&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sb&lt;/span> &lt;span class="n">reference&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">471910020&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">sb:&lt;/span> &lt;span class="mo">012&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sb&lt;/span> &lt;span class="n">reference&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">471910020&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위의 경우처럼 단순히 문자열에 한 글자를 더하게 되면, 새로운 주소값을 갖는 새 문자열을 생성하여 저장하게 된다. 이렇게 문자열에 문자를 반복적으로 수정이 이뤄지는 상황은 비효율적이다. 이러한 경우 &lt;strong>StringBuffer&lt;/strong>를 사용하여 문자를 append 해주면 같은 주소값을 참조하여 하나의 문자열에 계속 추가를 해주게 되어 더 효율적인 것이다.&lt;/p>
&lt;p>그럼 &lt;strong>String&lt;/strong>에 새로운 문자를 추가하면 왜 새로운 문자열을 만들어 버리는것일까?&lt;/p>
&lt;p>여기서 알아야될 것은 사실 &lt;strong>String&lt;/strong>은 char형의 배열 형태라는 점이다. &lt;strong>String&lt;/strong>은 &lt;code>private final char value[];&lt;/code> 라고 선언이 되어있어서 한 번 만들어지면 변경이 불가하다. 때문에 새로운 문자를 추가하면 새로운 문자열로 만들어지는 것이다.&lt;/p>
&lt;h2 id="stringbuilder와-stringbuffer">StringBuilder와 StringBuffer&lt;/h2>
&lt;p>그렇다면 &lt;strong>StringBuilder&lt;/strong>는 또 무엇인가? &lt;strong>StringBuilder&lt;/strong>와 &lt;strong>StringBuffer&lt;/strong> 둘 다 변경 가능한 문자열이지만 차이점이 존재한다.&lt;/p>
&lt;h3 id="stringbuilder">StringBuilder&lt;/h3>
&lt;ul>
&lt;li>synchronization 적용되지 않음(비동기적)&lt;/li>
&lt;li>단일 스레드에서 StringBuffer보다 연산처리가 빠르다.&lt;/li>
&lt;/ul>
&lt;h3 id="stringbuffer-1">StringBuffer&lt;/h3>
&lt;ul>
&lt;li>synchronization 적용(동기적)&lt;/li>
&lt;li>여러 스레드에서 사용하기에 안전&lt;/li>
&lt;/ul>
&lt;br/>
&lt;p>싱글 스레드 환경에서 StringBuilder와 StringBuffer의 성능을 직접 비교해보면 다음과 같다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">StringBuffer&lt;/span> &lt;span class="n">sBuffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuffer&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StringBuilder&lt;/span> &lt;span class="n">sBuilder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10000000&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sBuffer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// StringBuffer에 1천만번 append를 한 시작 시간과 끝난 시간 비교
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;StringBuffer -&amp;gt; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}).&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">startTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10000000&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">endTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentTimeMillis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// StringBuilder에 1천만번 append를 한 시작 시간과 끝난 시간 비교
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;StringBuilder -&amp;gt; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">endTime&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">startTime&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}).&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">StringBuilder&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="mi">637&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">StringBuffer&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="mi">849&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>하나의 스레드에서는 StringBuilder가 조금 더 빠른것을 확인할 수 있다.&lt;/p>
&lt;p>결론적으로 하나의 스레드라면 지역 변수로 &lt;strong>StringBuilder&lt;/strong>를, 여러개의 스레드라면 전역 변수로 &lt;strong>StringBuffer&lt;/strong>를 사용하는 것이 효과적이다.&lt;/p>
&lt;br/>
&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener noreferrer">오라클 api 공식 문서&lt;/a>&lt;br>
&lt;a href="https://novemberde.github.io/2017/04/15/String_0.html" target="_blank" rel="noopener noreferrer">Java에서 String, StringBuilder, StringBuffer의 차이&lt;/a>&lt;br>
&lt;a href="https://hwanny.netlify.app/java/string,-stringbuffer,-stringbuilder/" target="_blank" rel="noopener noreferrer">String, StringBuffer, StringBuilder&lt;/a>&lt;/p></description></item></channel></rss>