[{"content":"디자인 패턴이란? 소프트웨어를 설계하는 원칙을 최종적으로 정의한 것이 SOLID 원칙이었고, 이 원칙을 지키며 설계를 해보니 공통적인 23가지의 패턴이 있었다. 이렇게 23가지의 디자인 패턴이 등장하게 되었다.\nGoF(Gang of Four) : 디자인 패턴을 구체화하고 체계화한 4인\n에리히 감마(Erich Gamma), 리차드 헬름(Richard Helm), 랄프 존슨(Ralph Johnson), 존 블리시디스(John Vissides)\n디자인 패턴을 잘 사용하면 효율성과 재사용성을 높일 수 있으며, 설계 자료를 유형별로 분류하면 개발 기간을 둘이고 유지보수도 매우 쉬워질 수 있다. 디자인 패턴은 알고리즘처럼 프로그램 코드로 변환하여 바로 사용할 수 있는 것은 아니지만 유사한 상황에서 구조적인 문제를 해결할 수 있는 방안을 제시해준다.\n디자인 패턴의 분류 디자인 패턴은 생성(Creational), 구조(Structural), 행위(Behavioral) 패턴 3가지로 분류된다.\n생성 패턴 Abstract Factory Pattern (추상 팩토리 패턴)\n구체적인 클래스를 지정하지 않고 관련성을 갖는 객체들의 집합을 생성하거나 서로 독립적인 객체들의 집합을 생성할 수 있는 인터페이스를 제공하는 패턴이다.\nBuilder Pattern\n복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴이다.\nFactory Method Pattern\n객체를 생성하는 인터페이스는 미리 정의하되, 인스턴스를 만들 클래스의 결정은 서브클래스 쪽에서 내리는 패턴이다. 팩토리 메소드 패턴에서는 클래스의 인스턴스를 만드는 시점을 서브클래스로 미룬다.\nPrototype Pattern\n생성할 객체의 종류를 명세화하는 데에 원형이 되는 예시물을 이용하고, 그 원형을 복사함으로써 새로운 객체를 생성하는 패턴이다.\nSingleton Pattern\n어떤 클래스의 인스턴스는 오직 하나임을 보장하며, 이 인스턴스에 접근할 수 있는 전역적인 접촉점을 제공하는 패턴이다.\n구조 패턴 Adapter Pattern\n클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스로 변환하는 패턴으로, 호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 함께 작동하도록 한다.\nBridge Pattern\n구현부에서 추상층을 분리하여 각자 독립적으로 변형할 수 있게 하는 패턴이다.\nComposite Pattern\n객체들의 관계를 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴으로, 사용자가 단일 객체와 복합 객체 모두 동일하게 다루도록 한다.\nDecorator Pattern\n주어진 상황 및 용도에 따라 어떤 객체에 책임을 덧붙이는 패턴으로, 기능 확장이 필요할 때 서브클래싱 대신 쓸 수 있는 유연한 대안이 될 수 있다.\nFacade Pattern\n서브시스템에 있는 인터페이스 집합에 대해서 하나의 통합된 인터페이스를 제공하는 패턴으로, 서브시스템을 좀더 사용하기 편하게 만드는 상위 수준의 인터페이스를 정의한다.\nFlyweight Pattern\n크기가 작은객체가 여러개 있을 때, 공유를 통해 이들을 효율적으로 지원하는 패턴이다.\nProxy Pattern\n어떤 다른 객체로 접근하는 것을 통제하기 위해서 그 객체의 대리자(surrogate), 또는 자리채움자(placeholder)를 제공하는 패턴이다.\n행위 패턴 Chain of Responsibility Pattern (책임 연쇄 패턴)\n요청을 처리할 수 있는 기회를 하나 이상의 객체에게 부여하여 요청을 보내는 객체와 그 요청을 받는 객체 사이의 결합을 피하는 패턴이다.\n요청을 받을 수 있는 객체를 연쇄적으로 묶고, 실제 요청을 처리한 객체를 만날 때까지 객체 고리를 따라서 요청을 전달한다.\nCommand Pattern\n요청을 객체의 형태로 캡슐화하여, 서로 요청이 다른 사용자의 매개변수화, 요청 저장 또는 로깅, 그리고 연산의 취소를 지원하게 만드는 패턴이다.\nInterpreter Pattern\n주어진 언어에 대해, 그 언어의 문법을 위한 표현 수단을 정의하고, 이와 아울러 그 표현 수단을 사용하여 해당 언어로 작성된 문장을 해석하는 해석기를 정의하는 패턴이다.\nIterator Pattern\n내부 표현부를 노출하지 않고 어떤 객체 집합에 속한 원소들을 순차적으로 접근할 수 있는 방법을 제공하는 패턴이다.\nMediator Pattern\n한 집합에 속해있는 객체들의 상호작용을 캡슐화하는 객체를 정의하는 패턴이다.\n객체들이 직접 서로를 참조하지 않도록 함으로써 객체들 사이의 소결합(loose coupling)을 촉진시키며, 개발자가 객체들의 상호작용을 독립적으로 다양화시킬 수 있게 만든다.\nMemento Pattern\n캡슐화를 위배하지 않는 채 어떤 객체의 내부 상태를 잡아내고 신체화시켜, 이후에 해당 객체가 그 상태로 다시 되돌아올 수 있도록 하는 패턴이다.\nObserver Pattern\n객체 사이에 일 대 다의 의존 관계를 정의해 두어, 어떤 객체의 상태가 변할 때 그 객체에 의존성을 가진 다른 객체들이 그 변화를 통지받고 자동으로 갱신될 수 있게 만드는 패턴이다.\nState Pattern\n객체의 내부 상태에 따라 스스로 행동을 변경할 수 있게끔 허가하는 패턴으로, 이렇게 하면 객체는 마치 자신의 클래스를 바꾸는 것 처럼 보인다.\nStrategy Pattern\n동일 계열의 알고리즘군을 정의하고, 각각의 알고리즘을 캡슐화하며, 이들을 상호교환이 가능하도 록 만드는 패턴이다.\n알고리즘을 사용하는 사용자와 상관없이 독립적으로 알고리즘을 다양하게 변경할 수 있게 한다.\nTemplate Method Pattern\n객체의 연산에는 알고리즘의 뼈대만을 정의하고 각 단계에서 수행할 구체적 처리는 서브클래스 쪽으로 미루는 패턴이다.\n알고리즘의 구조 자체는 그대로 놔둔 채 알고리즘 각 단계의 처리를 서브클래스에서 재정의할 수 있게 한다.\nVisitor Pattern\n객체 구조를 이루는 원소에 대해 수행할 연산을 표현하는 패턴으로, 연산을 적용할 원소의 클래스를 변경하지 않고도 새로운 연산을 정의할 수 있게 한다.\nReferences [Design Pattern] 디자인 패턴 종류\nGOF 디자인 패턴 23가지\n객체지향 디자인패턴 1\n객체지향 디자인패턴 2\n","date":"2021-08-07T12:30:00Z","permalink":"/p/23%EA%B0%80%EC%A7%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/","title":"23가지 디자인 패턴"},{"content":"java.lang 패키지에는 Object 클래스가 포함되어 있다. 그리고 이 Object 클래스는 모든 Java 클래스의 최고 상위 클래스로 모든 클래스는 Object 클래스를 상속받는다.\n따라서 Java의 모든 클래스들은 Object 클래스의 모든 메소드를 바로 사용할 수 있고, 이것을 잘 익혀놓으면 다양하게 활용할 수 있다.\n총 11개의 메소드로 구성되어 있고, 주로 toString(), equals(), hashCode(), clone()을 override 해서 사용한다.\n메소드들을 좀더 자세히 알아보겠다.\nObject Class의 11가지 method Method 설명 protected Object clone() 해당 객체의 복제본을 생성하여 반환함. boolean equals(Object obj) 해당 객체와 전달받은 객체가 같은지 여부를 반환함. protected void finalize() 해당 객체를 더는 아무도 참조하지 않아 가비지 컬렉터가 객체의 리소스를 정리하기 위해 호출함. Class\u0026lt;T\u0026gt; getClass() 해당 객체의 클래스 타입을 반환함. int hashCode() 해당 객체의 해시 코드값을 반환함. void notify() 해당 객체의 대기(wait)하고 있는 하나의 스레드를 다시 실행할 때 호출함. void notifyAll() 해당 객체의 대기(wait)하고 있는 모든 스레드를 다시 실행할 때 호출함. String toString() 해당 객체의 정보를 문자열로 반환함. void wait() 해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행할 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함. void wait(long timeout) 해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행하거나 전달받은 시간이 지날 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함. void wait(long timeout, int nanos) 해당 객체의 다른 스레드가 notify()나 notifyAll() 메소드를 실행하거나 전달받은 시간이 지나거나 다른 스레드가 현재 스레드를 인터럽트 할 때까지 현재 스레드를 일시적으로 대기(wait)시킬 때 호출함. toString() toString() method는 해당 인스턴스의 정보를 문자열로 반환한다.\n클래스 이름과 구분자 \u0026lsquo;@\u0026rsquo;, 그 뒤에 16진수 해시 코드가 반환된다.\ntoString()의 원형 getClass().getName() + '@' + Integer.toHexString(hashCode())\n1 2 3 4 5 6 7 8 9 10 11 class TestMethod {...} class Main { public static void main(String args[]) { TestMethod test01 = new TestMethod(); TestMethod test02 = new TestMethod(); System.out.println(test01.toString()); System.out.println(test02.toString()); } } 실행 결과\n1 2 TestMethod@2c7b84de TestMethod@3fee733d String String 객체를 출력하면 String 객체가 저장하고 있는 문자열이 출력된다.\njdk의 String 클래스는 toString()을 override하고 있기 때문이다.\n1 2 String test = new String(\u0026#34;Test\u0026#34;); System.out.println(test); 실행 결과\n1 Test 그렇다면 이 toString()을 어떤 경우에 override해서 사용할까?\n예를 들어 보겠다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class Song { private String title; private String singer; public Song(String title, String singer) { this.title = title; this.singer = singer; } @Override public String toString() { return \u0026#34;Song{title=\u0026#39;\u0026#34; + title + \u0026#34;\u0026#39;, singer=\u0026#39;\u0026#34; + singer + \u0026#34;\u0026#39;}\u0026#34;; } public static void main(String[] args) { Song song = new Song(\u0026#34;노래 제목\u0026#34;, \u0026#34;가수\u0026#34;); System.out.println(song); } } 실행 결과\n1 Song{title=\u0026#39;노래 제목\u0026#39;, singer=\u0026#39;가수\u0026#39;} 이렇게 객체의 정보를 문자열 형태로 표현하고자 할 때,\n공통적으로 출력되어야 하는 형태가 있는 경우,\ntoString()을 override해서 return 값을 바꿔줄 수 있다.\nequals() equals() method는 두 객체가 같은 객체인지 비교할 때 사용한다.\n여기서 동등성과 동일성에 대해 생각해볼 필요가 있다.\n주로 primitive type의 자료형이 같은 지를 비교할 때 \u0026rsquo;==\u0026rsquo; 연산자를 사용하는데, 이는 두 object가 같은 정보를 담고 있는지를 비교한다. 즉, 동등한지를 비교한다.\n그리고 두 객체가 같은 지를 비교할 때는 equals() method를 사용하는데, 이는 두 object가 완전히 같은, 동일한 object인지 비교하는 것이다.\n두 객체가 같은 주소값을 가지는 같은 객체라는 것이 동일하다고 표현된다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class User { int id; String name; public User(int id, String name) { this.id = id; this.name = name; } public boolean equals(Object obj) { return (this == obj); } public static void main(String[] args) { User user1 = new User(1000, \u0026#34;최승은\u0026#34;); User user2 = new User(1000, \u0026#34;최승은\u0026#34;); // 두 개의 다른 객체가 같은 값을 가지고 있다. System.out.println(user1.equals(user2)); // 서로 다른 객체이기 때문에 false user1 = user2; // 두 변수가 같은 주소를 가리키게 된다. System.out.println(user1.equals(user2)); // 같은 주소값의 같은 객체이기 때문에 true } } 실행 결과\n1 2 false true equals() 기본 형태 1 2 3 public boolean equals(Object obj) { return (this == obj); } equals의 기본 형태는 이렇다. object가 동일한지를 비교하는 것이다.\n그렇다면 equals()는 어떤 경우에 override해서 사용할까?\n예를 들어 보겠다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class User { int id; String name; public User(int id, String name) { this.id = id; this.name = name; } public int getId() { return id; } @Override public boolean equals(Object obj) { if (obj instanceof User) { return this.getId() == ((User)obj).getId(); } else { return false; } } public static void main(String[] args) { User user1 = new User(1000, \u0026#34;최승은\u0026#34;); User user2 = new User(1000, \u0026#34;최승은\u0026#34;); System.out.println(user1.equals(user2)); } } 실행 결과\n1 true 위의 예시처럼 두 객체가 같은 해시코드 값을 갖는지 비교하는 내용으로 override를 하여 사용한다.\nhashCode() 해시코드란 JVM이 인스턴스를 생성할 때 메모리 주소를 변환해서 부여하는 코드이다.\n실제 메모리 주소값과는 별개이며, 실제 메모리 주소는 System 클래스의 identityHashCode()로 확인할 수 있다.\n자바에서의 동일성은 equals()의 반환값이 true, hashCode() 반환값이 동일함을 의미한다.\n그래서 일반적으로 equals()와 hashCode()는 함께 override 한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class User { int id; String name; public User(int id, String name) { this.id = id; this.name = name; } public int getId() { return id; } @Override public boolean equals(Object obj) { if (obj instanceof User) { return this.getId() == ((User)obj).getId(); } else { return false; } } @Override public int hashCode() { return getId(); } public static void main(String[] args) { User user1 = new User(1000, \u0026#34;최승은\u0026#34;); User user2 = new User(1000, \u0026#34;최승은\u0026#34;); System.out.println(\u0026#34;user1.equals(user2): \u0026#34; + user1.equals(user2)); System.out.println(\u0026#34;user1.hashCode(): \u0026#34; + user1.hashCode()); System.out.println(\u0026#34;user2.hashCode(): \u0026#34; + user2.hashCode()); System.out.println(\u0026#34;System.identityHashCode(user1): \u0026#34; + System.identityHashCode(user1)); System.out.println(\u0026#34;System.identityHashCode(user2): \u0026#34; + System.identityHashCode(user2)); } } 실행 결과\n1 2 3 4 5 user1.equals(user2): true user1.hashCode(): 1000 user2.hashCode(): 1000 System.identityHashCode(user1): 1804094807 System.identityHashCode(user2): 951007336 위의 예시는 id를 해시코드 값으로 반환하여 출력하게 된다.\n이렇게 두 개의 서로 다른 메모리에 위치한 객체가 동일성을 갖기 위해 override를 하게 된다.\nWrapper class Integer 클래스도 Object 클래스의 hashCode()를 override하고 있다.\n1 2 3 4 5 6 7 Integer a = new Integer(1); Integer b = new Integer(1); System.out.println(a == b); System.out.println(a.equals(b)); System.out.println(\u0026#34;a.hashCode(): \u0026#34; + a.hashCode()); System.out.println(\u0026#34;b.hashCode(): \u0026#34; + b.hashCode()); 실행 결과\n1 2 3 4 false true a.hashCode(): 1 b.hashCode(): 1 위 코드를 보면 a 객체와 b 객체는 같은 값을 갖지만 따로 생성된 다른 객체이다. 따라서 \u0026lsquo;==\u0026rsquo; 연산자를 사용하여 비교하면 false가 나온다.\n하지만 equals() 메소드를 사용하여 비교하면 true가 나온다. 그 이유는 같은 hashcode 주소값을 갖기 때문이다.\njava.lang에 있는 integer 클래스를 보면 hashCode() 메소드가 override 되어있는것을 확인할 수 있다.\n1 2 3 4 @Override public int hashCode() { return Integer.hashCode(value); } clone() clone() method는 객체를 복제할 때 사용하며, private 필드도 복제할 수 있기 때문에 정보은닉에 위배될 수 있다.\n따라서 인터페이스가 명시돼있는 클래스만 clone()을 통해 객체를 복제할 수 있다.\nfinalize() finalize() method는 직접 호출하는 메소드가 아니라 객체가 힙 메모리에서 해제될 때 가비지콜렉터가 호출하는 메소드이다.\n이 메소드가 override 되어있으면 가비지콜렉터가 이 메소드를 호출하여 실행한다.\n즉, finalize()에는 객체가 해제될 때 리소스 해제, 소켓 close 등의 필요한 것들을 구현해주면 된다.\nReferences 오라클 api 공식 문서\nObject 클래스\n자바 Object 클래스 정리 - toString(), equals(), hashCode(), clone()\n","date":"2021-08-04T22:40:00Z","permalink":"/p/object-class/","title":"Object Class"},{"content":"Java에는 기본적으로 제공하는 api들이 있다. 이에 대한 내용은 오라클 공식 문서에 자세히 기재되어 있다.\njava의 기본 패키지들은 따로 import 하지 않아도 기본적으로 사용할 수 있기 떄문에 이를 잘 활용하는 것이 필요하다.\n본 포스팅에서는 String, StringBuffer, StringBuilder에 대해 알아보려고 한다.\njava.lang package에 포함되어 있는 String, StringBuffer, StringBuilder classes String 먼저 String에 대한 문서 내용을 확인해보면 Serializable, Comparable, CharSequence 인터페이스가 상속되어 있고, public final class로 되어 있다. serialize가 가능하며 문자열이고 비교가능한 값이라는 것을 알 수 있다. 또한 final class이기 때문에 String class를 상속받을 수는 없다.\nConstant Pool Java에서는 String을 특별하게 취급한다. Java heap 영역 안에 String constant pool이 존재하는데, String을 literal로 생성하면 Heap 영역 안에 있는 constant pool에 저장되어 재사용된다.\n그림으로 나타내면 아래와 같다.\nString 객체를 생성하여 저장하면 중복되는 값도 계속 heap 영역에 저장되기 때문에 메모리 낭비가 생긴다. 따라서 중복되는 문자열은 literal로 생성하여 constant pool에 저장되게 하는게 유리하다. constant pool에 저장된 문자열은 같은 주소값을 참조한다는 점도 참고하여 코드 설계에 적용하는것이 좋다.\n추가로 String 객체를 생성하여 intern() 메소드를 호출하면 constant pool에 접근하여 이미 있는 문자열을 참조할 수 있다.\n그리고 문자열을 더할때는 StringBuffer 또는 StringBuilder를 사용하여 구현한다고 한다.\n왜 단순히 문자열에 계속 문자를 더하지 않고, StringBuffer와 StringBuilder을 이용하는 것일까?\n좀 더 자세히 알아보자.\nStringBuffer StringBuffer는 문자열을 추가하거나 변경 할 때 주로 사용하는 자료형이다.\n실제로 어떻게 다른지 확인해보자.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 문자열 test1의 값과 주소값 확인 String test1 = \u0026#34;TEST 1\u0026#34;; System.out.println(\u0026#34;test1: \u0026#34; + test1); System.out.println(\u0026#34;test1 reference: \u0026#34; + test1.hashCode()); // 문자열에 한 글자씩 더하여 주소값 확인 for (int a = 0; a = 3; a++) { test1 += a; System.out.println(\u0026#34;test1: \u0026#34; + test1); System.out.println(\u0026#34;test1 reference: \u0026#34; + test1.hashCode()); } // StringBuffer 생성 StringBuffer sb = new StringBuffer(); // StringBuffer에 문자를 append 하고 주소값 확인 for (int a = 0; a = 3; a++) { sb.append(a); System.out.println(\u0026#34;sb: \u0026#34; + sb); System.out.println(\u0026#34;sb reference: \u0026#34; + sb.hashCode()); } 실행 결과\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 test1: TEST 1 test1 reference: -1823841245 test1: TEST 10 test1 reference: -704503699 test1: TEST 101 test1 reference: -364778140 test1: TEST 1012 test1 reference: 1576779598 sb: 0 sb reference: 471910020 sb: 01 sb reference: 471910020 sb: 012 sb reference: 471910020 위의 경우처럼 단순히 문자열에 한 글자를 더하게 되면, 새로운 주소값을 갖는 새 문자열을 생성하여 저장하게 된다. 이렇게 문자열에 문자를 반복적으로 수정이 이뤄지는 상황은 비효율적이다. 이러한 경우 StringBuffer를 사용하여 문자를 append 해주면 같은 주소값을 참조하여 하나의 문자열에 계속 추가를 해주게 되어 더 효율적인 것이다.\n그럼 String에 새로운 문자를 추가하면 왜 새로운 문자열을 만들어 버리는것일까?\n여기서 알아야될 것은 사실 String은 char형의 배열 형태라는 점이다. String은 private final char value[]; 라고 선언이 되어있어서 한 번 만들어지면 변경이 불가하다. 때문에 새로운 문자를 추가하면 새로운 문자열로 만들어지는 것이다.\nStringBuilder와 StringBuffer 그렇다면 StringBuilder는 또 무엇인가? StringBuilder와 StringBuffer 둘 다 변경 가능한 문자열이지만 차이점이 존재한다.\nStringBuilder synchronization 적용되지 않음(비동기적) 단일 스레드에서 StringBuffer보다 연산처리가 빠르다. StringBuffer synchronization 적용(동기적) 여러 스레드에서 사용하기에 안전 싱글 스레드 환경에서 StringBuilder와 StringBuffer의 성능을 직접 비교해보면 다음과 같다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 StringBuffer sBuffer = new StringBuffer(); StringBuilder sBuilder = new StringBuilder(); new Thread(() -\u0026gt; { long startTime = System.currentTimeMillis(); for (int i = 0; i \u0026lt; 10000000; i++) { sBuffer.append(i); } long endTime = System.currentTimeMillis(); // StringBuffer에 1천만번 append를 한 시작 시간과 끝난 시간 비교 System.out.println(\u0026#34;StringBuffer -\u0026gt; \u0026#34; + (endTime - startTime)); }).start(); new Thread(() -\u0026gt; { long startTime = System.currentTimeMillis(); for (int i = 0; i \u0026lt; 10000000; i++) { sBuilder.append(i); } long endTime = System.currentTimeMillis(); // StringBuilder에 1천만번 append를 한 시작 시간과 끝난 시간 비교 System.out.println(\u0026#34;StringBuilder -\u0026gt; \u0026#34; + (endTime - startTime)); }).start(); 실행 결과\n1 2 StringBuilder -\u0026gt; 637 StringBuffer -\u0026gt; 849 하나의 스레드에서는 StringBuilder가 조금 더 빠른것을 확인할 수 있다.\n결론적으로 하나의 스레드라면 지역 변수로 StringBuilder를, 여러개의 스레드라면 전역 변수로 StringBuffer를 사용하는 것이 효과적이다.\nReferences 오라클 api 공식 문서\nJava에서 String, StringBuilder, StringBuffer의 차이\nString, StringBuffer, StringBuilder\n","date":"2021-08-03T23:00:00Z","permalink":"/p/stringbuffer-stringbuilder/","title":"StringBuffer와 StringBuilder"}]